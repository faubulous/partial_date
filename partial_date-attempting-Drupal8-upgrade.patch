diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
index 0000000..d159169
--- /dev/null
+++ b/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/config/install/partial_date.format.long.yml b/config/install/partial_date.format.long.yml
new file mode 100644
index 0000000..5ca6a24
--- /dev/null
+++ b/config/install/partial_date.format.long.yml
@@ -0,0 +1,63 @@
+uuid: 734520c8-8531-41b4-aac2-b08263ab94f7
+langcode: en
+status: true
+dependencies: {  }
+id: long
+label: Long
+meridiem: a
+year_designation: bc
+display:
+  year: estimate_label
+  month: estimate_label
+  day: estimate_label
+  hour: estimate_label
+  minute: estimate_label
+  second: none
+  timezone: none
+components:
+  year:
+    weight: 0
+    format: Y-ce
+    empty: ''
+  month:
+    weight: 1
+    format: F
+    empty: ''
+  day:
+    weight: 2
+    format: j-S
+    empty: ''
+  hour:
+    weight: 3
+    format: h
+    empty: ''
+  minute:
+    weight: 4
+    format: i
+    empty: ''
+  second:
+    weight: 5
+    format: s
+    empty: ''
+  timezone:
+    weight: 6
+    format: e
+    empty: ''
+  c1:
+    weight: 7
+    value: ''
+  c2:
+    weight: 8
+    value: ''
+  c3:
+    weight: 9
+    value: ''
+  approx:
+    weight: -1
+    value: ''
+separator:
+  date: ' '
+  time: ':'
+  datetime: ', '
+  range: ' to '
+  other: ' '
diff --git a/config/install/partial_date.format.medium.yml b/config/install/partial_date.format.medium.yml
new file mode 100644
index 0000000..8c28a41
--- /dev/null
+++ b/config/install/partial_date.format.medium.yml
@@ -0,0 +1,63 @@
+uuid: 2afdda05-5fcd-439b-a803-169d9675ec4a
+langcode: en
+status: true
+dependencies: {  }
+id: medium
+label: Medium
+meridiem: a
+year_designation: bc
+display:
+  year: estimate_label
+  month: estimate_label
+  day: estimate_label
+  hour: estimate_label
+  minute: estimate_label
+  second: none
+  timezone: none
+components:
+  year:
+    weight: 0
+    format: Y-ce
+    empty: ''
+  month:
+    weight: 1
+    format: M
+    empty: ''
+  day:
+    weight: 2
+    format: 'j-S'
+    empty: ''
+  hour:
+    weight: 3
+    format: h
+    empty: ''
+  minute:
+    weight: 4
+    format: i
+    empty: ''
+  second:
+    weight: 5
+    format: s
+    empty: ''
+  timezone:
+    weight: 6
+    format: T
+    empty: ''
+  c1:
+    weight: 7
+    value: ''
+  c2:
+    weight: 8
+    value: ''
+  c3:
+    weight: 9
+    value: ''
+  approx:
+    weight: -1
+    value: ''
+separator:
+  date: ' '
+  time: ':'
+  datetime: ' '
+  range: ' - '
+  other: ' '
diff --git a/config/install/partial_date.format.short.yml b/config/install/partial_date.format.short.yml
new file mode 100644
index 0000000..b5136e1
--- /dev/null
+++ b/config/install/partial_date.format.short.yml
@@ -0,0 +1,63 @@
+uuid: c1cdc64a-0983-454c-a113-aaf6a2de73ef
+langcode: en
+status: true
+dependencies: {  }
+id: short
+label: Short
+meridiem: a
+year_designation: sign
+display:
+  year: estimate_label
+  month: estimate_label
+  day: estimate_label
+  hour: estimate_label
+  minute: estimate_label
+  second: none
+  timezone: none
+components:
+  year:
+    weight: 0
+    format: 'Y'
+    empty: ''
+  month:
+    weight: 1
+    format: m
+    empty: ''
+  day:
+    weight: 2
+    format: d
+    empty: ''
+  hour:
+    weight: 3
+    format: G
+    empty: ''
+  minute:
+    weight: 4
+    format: i
+    empty: ''
+  second:
+    weight: 5
+    format: s
+    empty: ''
+  timezone:
+    weight: 6
+    format: T
+    empty: ''
+  c1:
+    weight: 7
+    value: ''
+  c2:
+    weight: 8
+    value: ''
+  c3:
+    weight: 9
+    value: ''
+  approx:
+    weight: -1
+    value: ''
+separator:
+  date: '/'
+  time: ':'
+  datetime: ' '
+  range: ' - '
+  other: ' '
diff --git a/config/install/partial_date.settings.yml b/config/install/partial_date.settings.yml
new file mode 100644
index 0000000..8c18d7d
--- /dev/null
+++ b/config/install/partial_date.settings.yml
@@ -0,0 +1,33 @@
+langcode: en
+partial_date_component_field_txt_inline_styles: 'float: left; clear: left;'
+partial_date_component_field_inline_styles: '???'
+estimates:
+    year:
+        - '-60000|1600|Pre-colonial'
+        - '1500|1599|16th century'
+        - '1600|1699|17th century'
+        - '1700|1799|18th century'
+        - '1800|1899|19th century'
+        - '1900|1999|20th century'
+        - '2000|2099|21st century'
+    month:
+        - '11|1|Winter'
+        - '2|4|Spring'
+        - '5|7|Summer'
+        - '8|10|Autumn'
+    day:
+        - '0|12|The start of the month'
+        - '10|20|The middle of the month'
+        - '18|31|The end of the month'
+    hour:
+        - '6|18|Day time'
+        - '6|12|Morning'
+        - '12|13|Noon'
+        - '12|18|Afternoon'
+        - '18|22|Evening'
+        - '0|1|Midnight'
+        - '18|6|Night'
+    minute:
+    second:
+_core:
+  default_config_hash: I9g7ge8pUcTuQxGwCofIjVyGOkwgxRJ6DqAkdVWmW2k
diff --git a/config/schema/partial_date.schema.yml b/config/schema/partial_date.schema.yml
new file mode 100644
index 0000000..ead8c8a
--- /dev/null
+++ b/config/schema/partial_date.schema.yml
@@ -0,0 +1,172 @@
+partial_date.settings:
+  type: mapping
+  label: Settings
+  mapping:
+    partial_date_component_field_txt_inline_styles:
+      type: string
+      label: txt_inline_styles
+    partial_date_component_field_inline_styles:
+      type: string
+      label: inline_styles
+    langcode:
+        type: string
+        label: 'Language code'
+    estimates.*:
+        type: sequence
+        label: estimates
+        sequence:
+            type: string
+
+partial_date.format.*:
+    type: config_entity
+    label: 'Partial date format'
+    mapping:
+        id:
+            type: string
+            label: 'ID'
+        label:
+            type: string
+            label: 'Label'
+        meridiem: 
+            type: string
+            label: 'Meridiem'
+        year_designation:
+            type: string
+            label: 'Year Designation'
+        display:
+            type: partial_date.format.display
+            label: 'Display'
+        components:
+            type: partial_date.format.components
+            label: 'Components'
+        separator:
+            type: partial_date.format.separator
+            label: 'Separator'
+
+partial_date.format.display:
+    type: mapping
+    label: 'Display'
+    mapping:
+        year: 
+            type: string
+            label: 'Year'
+            default: 'estimate_label'
+        month: 
+            type: string
+            label: 'Year'
+            default: 'estimate_label'
+        day: 
+            type: string
+            label: 'Year'
+            default: 'estimate_label'
+        hour: 
+            type: string
+            label: 'Year'
+            default: 'estimate_label'
+        minute:
+            type: string
+            label: 'Year'
+            default: 'estimate_label'
+        second: 
+            type: string
+            label: 'Year'
+            default: 'none'
+        timezone: 
+            type: string
+            label: 'Year'
+            default: 'none'
+
+partial_date.format.separator:
+    type: mapping
+    label: 'Separator'
+    mapping:
+        date: 
+            type: string
+            label: 'Date'
+            default: '/'
+        time: 
+            type: string
+            label: 'Time'
+            default: ':'
+        datetime: 
+            type: string
+            label: 'Date and time'
+            default: ' '
+        range: 
+            type: string
+            label: 'Range'
+            default: ' - '
+        other:
+            type: string
+            label: 'Other'
+            default: ' '
+
+partial_date.format.components:
+    type: mapping
+    label: 'Components'
+    mapping:
+        approx:
+            type: partial_date.format.component_value
+            label: 'approx'
+        year: 
+            type: partial_date.format.component_format
+            label: 'year'
+            default: 'estimate_label'
+        month: 
+            type: partial_date.format.component_format
+            label: 'month'
+            default: 'estimate_label'
+        day: 
+            type: partial_date.format.component_format
+            label: 'day'
+            default: 'estimate_label'
+        hour: 
+            type: partial_date.format.component_format
+            label: 'hour'
+            default: 'estimate_label'
+        minute:
+            type: partial_date.format.component_format
+            label: 'minute'
+            default: 'estimate_label'
+        second: 
+            type: partial_date.format.component_format
+            label: 'second'
+            default: 'none'
+        timezone: 
+            type: partial_date.format.component_format
+            label: 'timezone'
+            default: 'none'
+        c1:
+            type: partial_date.format.component_value
+            label: 'custom1'
+        c2:
+            type: partial_date.format.component_value
+            label: 'custom2'
+        c3:
+            type: partial_date.format.component_value
+            label: 'custom3'
+
+partial_date.format.component_value:
+    type: mapping
+    label: 'Components'
+    mapping:
+        value:
+            type: string
+            label: 'value'
+        weight: 
+            type: integer
+            label: 'weight'
+
+partial_date.format.component_format:
+    type: mapping
+    label: 'Components'
+    mapping:
+        format:
+            type: string
+            label: 'format'
+        weight: 
+            type: integer
+            label: 'weight'
+        empty: 
+            type: string
+            label: 'empty'
diff --git a/includes/partial_date.views.year_period_handler.inc b/includes/partial_date.views.year_period_handler.inc
index ac72fdf..fb0cf7d 100644
--- a/includes/partial_date.views.year_period_handler.inc
+++ b/includes/partial_date.views.year_period_handler.inc
@@ -142,7 +142,7 @@ class views_handler_filter_field_partial_date_year extends views_handler_filter_
         $which = in_array($this->operator, $this->operator_values(2)) ? 'minmax' : 'value';
       }
       else {
-        $source = 'edit-' . drupal_html_id($this->options['expose']['operator_id']);
+        $source = 'edit-' . \Drupal\Component\Utility\Html::getId($this->options['expose']['operator_id']);
       }
     }
 
@@ -249,12 +249,12 @@ class views_handler_filter_field_partial_date_year extends views_handler_filter_
     }
 
     $options = $this->operator_options('short');
-    $output = check_plain($options[$this->operator]);
+    $output = \Drupal\Component\Utility\SafeMarkup::checkPlain($options[$this->operator]);
     if (in_array($this->operator, $this->operator_values(2))) {
       $output .= ' ' . t('@min and @max', array('@min' => $this->value['min'], '@max' => $this->value['max']));
     }
     elseif (in_array($this->operator, $this->operator_values(1))) {
-      $output .= ' ' . check_plain($this->value['value']);
+      $output .= ' ' . \Drupal\Component\Utility\SafeMarkup::checkPlain($this->value['value']);
     }
     return $output;
   }
diff --git a/partial-date-admin.js b/partial-date-admin.js
new file mode 100644
index 0000000..3aabb9c
--- /dev/null
+++ b/partial-date-admin.js
@@ -0,0 +1,22 @@
+(function ($) {
+
+Drupal.togglePartialDateCustomSettings = function (val) {
+  if (val == 'custom') {
+    $('#partial-date-custom-component-settings').show();
+  }
+  else {
+    $('#partial-date-custom-component-settings').hide();
+  }
+}
+
+Drupal.behaviors.partialDateCustomFormatToogle = {
+  attach: function (context, settings) {
+    $('#partial-date-format-selector', context).each(function () {
+      Drupal.togglePartialDateCustomSettings($(this).val());
+    }).change(function () {
+      Drupal.togglePartialDateCustomSettings($(this).val());
+    });
+  }
+}
+
+})(jQuery);
diff --git a/partial_date.admin.inc b/partial_date.admin.inc
new file mode 100644
index 0000000..e6190ad
--- /dev/null
+++ b/partial_date.admin.inc
@@ -0,0 +1,502 @@
+<?php
+
+/**
+ * @file
+ * Less freq. functions for field administration.
+ */
+
+/**
+ * Internal callback for hook_field_info().
+ */
+//function _partial_date_field_info() {
+//  $base = array(
+//    'default_widget' => 'partial_date_widget',
+//    'default_formatter' => 'partial_date_default',
+//    'settings' => array(
+//      'estimates' => partial_date_field_estimates_default_settings(),
+//      // Minimal set of components before considered incomplete.
+//      // Includes each component and any, any_form, and any_to.
+//      'minimum_components' => array(),
+//    ),
+//  );
+//  return array(
+//    'partial_date' => $base + array(
+//      'label' => t('Partial date and time'),
+//      'description' => t('This field stores and renders partial dates.'),
+//    ),
+//    'partial_date_range' => $base + array(
+//      'label' => t('Partial date and time range'),
+//      'description' => t('This field stores and renders partial dates.'),
+//    ),
+//  );
+//}
+
+/**
+ * This generates the best estimate for the date components based on the
+ * submitted values.
+ */
+function partial_date_field_populate_components($item, $start_date = TRUE) {
+  $base = array(
+    'year' => $start_date ? PD2_YEAR_MIN : PD2_YEAR_MAX,
+    'month' => $start_date ? 1 : 12,
+    'day' => 0, // Calculate last as this is variable
+    'hour' => $start_date ? 0 : 23,
+    'minute' => $start_date ? 0 : 59,
+    'second' => $start_date ? 0 : 59,
+    'timezone' => '',
+  );
+
+  foreach (partial_date_components() as $key => $label) {
+    $value_key = $start_date ? $key : $key . '_to';
+    if (isset($item[$value_key]) && strlen($item[$value_key])) {
+      $base[$key] = $item[$value_key];
+    }
+  }
+
+  if (empty($base['day'])) {
+    if ($start_date) {
+      $base['day'] = 1;
+    }
+    else {
+      $month_table = partial_date_month_matrix($base['year']);
+      if (isset($month_table[$base['month'] - 1])) {
+        $base['day'] = $month_table[$base['month'] - 1];
+      }
+      else {
+        $base['day'] = 31;
+      }
+    }
+  }
+  return $base;
+}
+
+/**
+ * Implements hook_field_presave().
+ *
+ * This assumes data in the format:
+ * from
+ *   year
+ *   year_estimate
+ *   month
+ *   month_estimate
+ *   etc
+ * to
+ *   year
+ *   year_estimate
+ *   month
+ *   month_estimate
+ *   etc
+ */
+function _partial_date_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
+  $has_range = strpos($field['type'], '_range');
+  foreach ($items as $delta => $item) {
+    $items[$delta] = array();
+    $items[$delta]['txt_short'] = isset($item['txt_short']) ? $item['txt_short'] : NULL;
+    $items[$delta]['txt_long'] = isset($item['txt_long']) ? $item['txt_long'] : NULL;
+    $items[$delta] += partial_date_field_presave_generate_storage_date($item['from']);
+
+    if ($has_range) {
+      $item['to'] = empty($item['to']) ? array() : $item['to'];
+      $items[$delta] += partial_date_field_presave_generate_storage_date($item['to'], TRUE);
+    }
+
+    // Populate empty components with the estimate components. On load, these
+    // should be cleared.
+    $items[$delta]['data'] = array(
+      'check_approximate' => empty($item['check_approximate']) ? 0 : 1,
+    );
+
+    foreach (partial_date_components(array('timezone')) as $key => $label) {
+      $items[$delta]['data'][$key . '_estimate'] = '';
+      $items[$delta]['data'][$key . '_estimate_from_used'] = 0;
+      $items[$delta]['data'][$key . '_estimate_to_used'] = 0;
+      $from = NULL;
+      $to = NULL;
+      if (!empty($item['from'][$key . '_estimate'])) {
+        $items[$delta]['data'][$key . '_estimate'] = $item['from'][$key . '_estimate'];
+        list ($from, $to) = explode('|', $item['from'][$key . '_estimate']);
+        if (!isset($item['from'][$key]) || !strlen($item['from'][$key])) {
+          $items[$delta][$key] = $from;
+          $items[$delta]['data'][$key . '_estimate_from_used'] = 1;
+        }
+        if ($has_range && (!isset($item['to'][$key]) || !strlen($item['to'][$key]))) {
+          $items[$delta][$key . '_to'] = $to;
+          $items[$delta]['data'][$key . '_estimate_to_used'] = 1;
+        }
+      }
+      if ($has_range) {
+        $items[$delta]['data'][$key . '_to_estimate'] = '';
+        if (!empty($item['to'][$key . '_estimate'])) {
+          // We use the to estimate if not set
+          $items[$delta]['data'][$key . '_to_estimate'] = $item['to'][$key . '_estimate'];
+          list ($from_to, $to_to) = explode('|', $item['to'][$key . '_estimate']);
+          if (!isset($item['from'][$key]) || !strlen($item['from'][$key]) || $items[$delta]['data'][$key . '_estimate_from_used']) {
+            $items[$delta][$key] = is_numeric($from) ? min(array($from_to, $from)) : $from_to;
+            $items[$delta]['data'][$key . '_estimate_from_used'] = 1;
+          }
+          if (!isset($item['to'][$key]) || !strlen($item['to'][$key]) || $items[$delta]['data'][$key . '_estimate_to_used']) {
+            $items[$delta][$key . '_to'] = is_numeric($to) ? max(array($to_to, $to)) : $to_to;;
+            $items[$delta]['data'][$key . '_estimate_to_used'] = 1;
+          }
+        }
+      }
+    }
+
+    // This is done after the estimates are expanded out.
+    $items[$delta]['timestamp'] = partial_date_float(partial_date_field_populate_components($items[$delta]));
+    if ($has_range) {
+      $items[$delta]['timestamp_to'] = partial_date_float(partial_date_field_populate_components($items[$delta], 0));
+    }
+
+    $items[$delta]['data'] = serialize($items[$delta]['data']);
+  }
+}
+
+/**
+ * Wrapper to set the storage column.
+ */
+function partial_date_field_presave_generate_storage_date($item, $end_date = FALSE) {
+  $components = array();
+  foreach (partial_date_components() as $key => $label) {
+    $empty = $key == 'timezone' ? '' : NULL;
+    $components[$key . ($end_date ? '_to' : '')] = isset($item[$key]) && strlen($item[$key]) ? $item[$key] : $empty;
+  }
+  return $components;
+}
+
+/**
+ * Implements hook_field_validate().
+ *
+ * Possible error codes:
+ * - 'xxxx': The partial_date year is not valid
+ *
+ * @see partial_date_field_widget_error().
+ */
+function _partial_date_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
+  $has_range = strpos($field['type'], 'range');
+  $date_components = partial_date_components();
+
+  $has_data = FALSE;
+  $minimum_components = FALSE;
+  if (!empty($field['settings']['minimum_components'])) {
+    $minimum_components = array_filter($field['settings']['minimum_components']);
+    $widget_settings = $instance['widget']['settings'];
+    $widget_components = array();
+    foreach (array_filter($widget_settings['granularity']['from']) as $key) {
+      $widget_components['from_granularity_' . $key] = $has_range ? t('From @component', array('@component' => $date_components[$key])) : $date_components[$key];
+    }
+    foreach (array_filter($widget_settings['estimates']['from']) as $key) {
+      $widget_components['from_estimates_' . $key] = $has_range ? t('From @component Estimate', array('@component' => $date_components[$key])) : $date_components[$key];
+    }
+    if ($has_range) {
+      foreach (array_filter($widget_settings['granularity']['to']) as $key) {
+        $widget_components['to_granularity_' . $key] = t('To @component', array('@component' => $date_components[$key]));
+      }
+      foreach (array_filter($widget_settings['estimates']['to']) as $key) {
+        $widget_components['to_estimates_' . $key] = t('To @component Estimate', array('@component' => $date_components[$key]));
+      }
+    }
+    if (!empty($widget_settings['theme_overrides']['txt_short'])) {
+      $widget_components['txt_short'] = t('Short date description');
+    }
+    if (!empty($widget_settings['theme_overrides']['txt_long'])) {
+      $widget_components['txt_long'] = t('Long date description');
+    }
+    $minimum_components = array_intersect_key($widget_components, $minimum_components);
+  }
+
+  foreach ($items as $delta => $item) {
+    if (!partial_date_field_is_empty($item, $field)) {
+      $has_data = TRUE;
+      $incomplete = array();
+      if ($minimum_components) {
+        foreach ($minimum_components as $key => $label) {
+          if (strpos($key, 'from_granularity_') === 0) {
+            $component = str_replace('from_granularity_', '', $key);
+            if (empty($item['from'][$component])) {
+              $errors[$field['field_name']][$langcode][$delta][] = array(
+                'error' => 'partial_date_incomplete_from',
+                'partial_date_component' => $component,
+                'message' => t('@component is required', array('@component' => $label)),
+              );
+            }
+          }
+          elseif (strpos($key, 'from_estimates_') === 0) {
+            $component = str_replace('from_estimates_', '', $key) . '_estimate';
+            if (empty($item['from'][$component])) {
+              $errors[$field['field_name']][$langcode][$delta][] = array(
+                'error' => 'partial_date_incomplete_from',
+                'partial_date_component' => $component,
+                'message' => t('@component is required', array('@component' => $label)),
+              );
+            }
+          }
+          elseif (strpos($key, 'to_granularity_') === 0) {
+            $component = str_replace('to_granularity_', '', $key);
+            if (empty($item['to'][$component])) {
+              $errors[$field['field_name']][$langcode][$delta][] = array(
+                'error' => 'partial_date_incomplete_to',
+                'partial_date_component' => $component,
+                'message' => t('@component is required', array('@component' => $label)),
+              );
+            }
+          }
+          elseif (strpos($key, 'to_estimates_') === 0) {
+            $component = str_replace('to_estimates_', '', $key) . '_estimate';
+            if (empty($item['to'][$component])) {
+              $errors[$field['field_name']][$langcode][$delta][] = array(
+                'error' => 'partial_date_incomplete_to',
+                'partial_date_component' => $component,
+                'message' => t('@component is required', array('@component' => $label)),
+              );
+            }
+          }
+          else {
+            if (empty($item[$key])) {
+              $errors[$field['field_name']][$langcode][$delta][] = array(
+                'error' => 'partial_date_incomplete_' . $key,
+                'partial_date_component' => $component,
+                'message' => t('@component is required', array('@component' => $label)),
+              );
+            }
+          }
+        }
+      }
+    }
+  }
+
+  if ($entity_type && $entity && !$has_data && $instance['required']) {
+    if (!empty($minimum_components)) {
+      $errors[$field['field_name']][$langcode][0][] = array(
+        'error' => 'partial_date_is_required',
+        'message' => t('@label requires at least one item to be completed. The following components are required: @components', array(
+            '@label' => $instance['label'],
+            '@components' => implode(', ', $minimum_components),
+        )),
+      );
+    }
+    else {
+      $errors[$field['field_name']][$langcode][0][] = array(
+        'error' => 'partial_date_is_required',
+        'message' => t('@label requires at least one item to be completed.', array('@label' => $instance['label'])),
+      );
+    }
+  }
+  // @todo - ensure that the estimates match the date.
+  $estimate_options = partial_date_field_estimates($field);
+return;
+// TODO
+  foreach ($items as $delta => $item) {
+    foreach (array('from', 'to') as $position) {
+      if (!$has_range && $position == 'to') {
+        break;
+      }
+
+      $item = $item[$position];
+      foreach (partial_date_components() as $key => $label) {
+        $value = strlen($item[$key]) ? $item[$key] : FALSE;
+        $estimate = strlen($item[$key . '_estimate']) ? $item[$key . '_estimate'] : FALSE;
+        if ($value && $estimate) {
+          list($start, $end) = explode('|', $estimate);
+          $empty_start = FALSE;
+          $empty_end = FALSE;
+          if (!strlen($start)) {
+            $start = $value;
+            $empty_start = TRUE;
+          }
+          if (!strlen($end)) {
+            $empty_end = TRUE;
+            $end = $value;
+          }
+/**
+ * Helper function to determine the best error message given that we are
+ * validating against a range that may or may not have a start or ending value.
+ */
+function _estimates_error_message($label, $estimate_label, $start, $end) {
+  $e = max(array($start, $end));
+
+  if ($start !== FALSE && $end !== FALSE) {
+    return t('%label fields do not match. %label must be greater than %start and less than %end if you select %estimate',
+        array('%start' => $start, '%end' => $end, '%estimate' => $estimate_label, '%label' => $label));
+  }
+  elseif ($start !== FALSE) {
+    return t('%label fields do not match. %label must be greater than %start if you select %estimate',
+        array('%start' => $start, '%estimate' => $estimate_label, '%label' => $label));
+  }
+  elseif ($end !== FALSE) {
+    return t('%label fields do not match. %label must be less than %end if you select %estimate',
+        array('%end' => $end, '%estimate' => $estimate_label, '%label' => $label));
+  }
+}
+
+          $message = FALSE;
+          switch ($key) {
+            case 'year':
+              if ($value < $start) {
+                $message = _estimates_error_message($label, $estimate_options[$key][$estimate], $start, $end);
+                $message = t('%label fields do not match. %label must be greater than %start if you select %estimate',
+                    array('%start' => $start, '%estimate' => $estimate_options[$key][$estimate], '%label' => $label));
+              }
+              elseif ($value > $end) {
+                $message = t('%label fields do not match. %label must be less than %end if you select %estimate',
+                    array('%end' => $end, '%estimate' => $estimate_options[$key][$estimate], '%label' => $label));
+              }
+              break;
+
+            default:
+              // If range is x to y && x < y, value must be between x and y
+              if ($end > $start) {
+                if (!($value >= $start && $value <= $end)) {
+                  $message = t('%label fields do not match. %label must be between %start and %end if you select %estimate',
+                      array('%start' => $start, '%estimate' => $estimate_options[$key][$estimate], '%label' => $label));
+                }
+              }
+              // If range is x to y && x > y, value must be between be <= x and  >= y
+              elseif ($end > $start) {
+                if (!($value >= $start || $value <= $end)) {
+
+                }
+              }
+              // For the use-case where $start == $end
+              elseif ($value != $start) {
+
+              }
+
+              if (!($internal_match || $external_match)) {
+                $message = t('%label fields do not match. %label must be greater than %start if you select %estimate',
+                    array('%start' => $start, '%estimate' => $estimate_options[$key][$estimate], '%label' => $label));
+              }
+              elseif ($value > $end) {
+                $message = t('%label fields do not match. %label must be less than %end if you select %estimate',
+                    array('%end' => $end, '%estimate' => $estimate_options[$key][$estimate], '%label' => $label));
+              }
+          }
+
+          if ($message) {
+            $errors[$field['field_name']][$langcode][$delta][] = array(
+              'error' => 'partial_date_invalid_' . $key,
+              'message' => $message,
+            );
+          }
+
+        }
+      }
+      $year;
+    }
+  }
+
+
+  foreach ($items as $delta => $item) {
+    // Validate we actually have valid year as an integer value.
+    if ($message = partial_date_field_validate_year($item, 'year')) {
+      $errors[$field['field_name']][$langcode][$delta][] = array(
+        'error' => 'partial_date_invalid_year_estimate',
+        'message' => $message,
+      );
+    }
+    if (!empty($item['year_estimate']) && !empty($item['year'])) {
+      // Search and validate the first match.
+      foreach ($year_estimates as $line) {
+        if ($line[0] == $item['year_estimate']) {
+          break;
+        }
+      }
+      if ($item['year'] < $line[0] || $item['year'] > $line[1]) {
+        $message = t('Year fields do not match. Year must be between %start and %end if you select %label', array('%start' => $line[0], '%end' => $line[1], '%label' => $line[2]));
+        $errors[$field['field_name']][$langcode][$delta][] = array(
+          'error' => 'partial_date_invalid_year_estimate',
+          'message' => $message,
+        );
+      }
+    }
+    if (!empty($item['year_estimate_to']) && !empty($item['year_to'])) {
+      // Search and validate the first match.
+      foreach ($year_estimates as $line) {
+        if ($line[1] == $item['year_estimate_to']) {
+          break;
+        }
+      }
+      if ($item['year_to'] < $line[0] || $item['year_to'] > $line[1]) {
+        $message = t('Year fields do not match. Year must be between %start and %end if you select %label', array('%start' => $line[0], '%end' => $line[1], '%label' => $line[2]));
+        $errors[$field['field_name']][$langcode][$delta][] = array(
+          'error' => 'partial_date_invalid_year_estimate_to',
+          'message' => $message,
+        );
+      }
+    }
+
+    if (!empty($item['month_estimate']) && !empty($item['month'])) {
+      // Search and validate the first match.
+      foreach ($month_estimates as $line) {
+        if ($line[0] == $item['month_estimate']) {
+          break;
+        }
+      }
+      if (0) {
+        $message = t('Month fields do not match. Year must be between %start and %end if you select %label', array('%start' => $line[0], '%end' => $line[1], '%label' => $line[2]));
+        $errors[$field['field_name']][$langcode][$delta][] = array(
+          'error' => 'partial_date_invalid_year_estimate',
+          'message' => $message,
+        );
+      }
+    }
+    if (!empty($item['year_estimate_to']) && !empty($item['year_to'])) {
+      // Search and validate the first match.
+      foreach ($year_estimates as $line) {
+        if ($line[1] == $item['year_estimate_to']) {
+          break;
+        }
+      }
+      if ($item['year_to'] < $line[0] || $item['year_to'] > $line[1]) {
+        $message = t('Year fields do not match. Year must be between %start and %end if you select %label', array('%start' => $line[0], '%end' => $line[1], '%label' => $line[2]));
+        $errors[$field['field_name']][$langcode][$delta][] = array(
+          'error' => 'partial_date_invalid_year_estimate_to',
+          'message' => $message,
+        );
+      }
+    }
+
+    /*
+    if ($item['partial_date'] != '' && !valid_partial_date_address(trim($item['partial_date']))) {
+    }
+    */
+  }
+}
+
+/**
+ * Helper for hook_field_validate() to test that the year in within range.
+ */
+function partial_date_field_validate_year($item, $key) {
+  if (isset($item[$key]) && strlen($item[$key])) {
+    $year = $item[$key];
+    // Validate that it is a real integer.
+    if ((string) $year === (string) (int) $year) {
+      if ($year > PD2_YEAR_MIN || $year < PD2_YEAR_MAX) {
+        return;
+      }
+    }
+    return t('Year must be an integer value between %start and %end.', array('%start' => PD2_YEAR_MIN, '%end' => PD2_YEAR_MAX));
+  }
+}
+
+function _partial_date_inline_float_css($component = TRUE) {
+  $language = \Drupal::languageManager()->getCurrentLanguage();
+  // Language will be \Drupal\Core\Language\Language::\Drupal\Core\Language\Language::\Drupal\Core\Language\Language::\Drupal\Core\Language\Language::\Drupal\Core\Language\Language::LANGUAGE_LTR (0) or \Drupal\Core\Language\Language::\Drupal\Core\Language\Language::\Drupal\Core\Language\Language::\Drupal\Core\Language\Language::\Drupal\Core\Language\Language::LANGUAGE_RTL (1).
+  $margin = $component ? '0.5' : '1';
+  if ($language->direction) {
+    return "float: right; margin-left: {$margin}em;";
+  }
+  else {
+    return "float: left; margin-right: {$margin}em;";
+  }
+}
+
+################################################################################
+#  Field API Hooks & Helpers: Formatter                                        #
+################################################################################
+
+################################################################################
+#  Element Related Functions:                                                  #
+################################################################################
+//  - moved to PartialDateElement
+
diff --git a/partial_date.calc.inc b/partial_date.calc.inc
new file mode 100644
index 0000000..e989c7c
--- /dev/null
+++ b/partial_date.calc.inc
@@ -0,0 +1,6 @@
+<?php
+
+/**
+ * @file
+ * Core date handling functions.
+ */
diff --git a/partial_date.info b/partial_date.info
index daeacc8..506a202 100644
--- a/partial_date.info
+++ b/partial_date.info
@@ -1,8 +1,15 @@
 name = Partial Date
 description = Simple date field that collects dates and allows partial dates.
-package = Fields
+package = Date/Time
 core = 7.x
 dependencies[] = date
 
 files[] = includes/partial_date.views.year_period_handler.inc
 
+
+; Information added by drupal.org packaging script on 2012-07-18
+version = "7.x-1.0-beta1"
+core = "7.x"
+project = "partial_date"
+datestamp = "1342599117"
+
diff --git a/partial_date.info.yml b/partial_date.info.yml
new file mode 100644
index 0000000..ae18b8e
--- /dev/null
+++ b/partial_date.info.yml
@@ -0,0 +1,8 @@
+name: Partial Date
+type: module
+description: 'Simple datetime field that allows partial dates.'
+package: Field types
+core: 8.x
+dependencies:
+  - field
+
diff --git a/partial_date.install b/partial_date.install
index da0422d..9a83f57 100644
--- a/partial_date.install
+++ b/partial_date.install
@@ -1,112 +1,17 @@
 <?php
 
+/**
+ * @file
+ * Defines the schema for the partial date fields.
+ */
 
 /**
  * Implement hook_field_schema().
+ * function partial_date_field_schema($field) - moved to PartialDateTime::schema()
  */
-function partial_date_field_schema($field) {
-  // All date types carry all columns.
-  // Date range types also have corresponding "_to" columns.
-  $has_to_date = strpos($field['type'], '_range');
-  $has_date = strpos($field['type'], 'date');
-  $has_time = strpos($field['type'], 'time');
-  $has_year_hint = strpos($field['type'], 'year_estimate');
-
-  $schema = array(
-    'columns' => array(
-      'timestamp' => array(
-        'type' => 'float',
-        'size' => 'big',
-        'description' => 'The calculated timestamp for a date stored in UTC as a float for unlimited date range support.',
-        'not null' => TRUE,
-        'default' => 0,
-      ),
-      // These are instance settings, so add to the schema for every field.
-      'txt_short' => array(
-        'type' => 'varchar',
-        'length' => 255,
-        'description' => 'A editable display dield for this date for the short format.',
-        'length' => 50,
-        'not null' => TRUE,
-        'default' => '',
-        'sortable' => FALSE,
-      ),
-      'txt_long' => array(
-        'type' => 'varchar',
-        'length' => 255,
-        'description' => 'A editable display dield for this date for the long format.',
-        'length' => 50,
-        'not null' => TRUE,
-        'default' => '',
-        'sortable' => FALSE,
-      ),
-    ),
-    'indexes' => array(
-      'timestamp' => array('timestamp'),
-    ),
-  );
-
-  // Instance setting to provide an approximation of the year. We always add
-  // this to allow dynamic toggling of the settings.
-  $hints = array('year_estimate');
-  if ($has_to_date) {
-    $hints[] = 'year_estimate_to';
-  }
-  foreach ($hints as $hint) {
-    $schema['columns'][$hint] = array(
-      'type' => 'int',
-      'description' => 'Year esitmate',
-      'not null' => FALSE,
-      'default' => NULL,
-      'size' => 'big',
-    );
-  }
-
-  // Add the timezone of applicable.
-  if ($has_time) {
-    $schema['columns']['timezone'] = array(
-      'type' => 'varchar',
-      'length' => 50,
-      'not null' => FALSE,
-      'sortable' => TRUE,
-    );
-  }
 
-  if ($has_to_date) {
-    $schema['columns']['timestamp_to'] = array(
-      'type' => 'float',
-      'size' => 'big',
-      'description' => 'The calculated timestamp for a date stored in UTC as a float for unlimited date range support.',
-      'not null' => FALSE,
-      'default' => NULL,
-    );
-  }
-
-  // We need to load both during installation.
-  module_load_include('module', 'partial_date');
-  module_load_include('module', 'date_api');
-
-  foreach (partial_date_components($has_date, $has_time, $has_to_date) as $key => $title) {
-    if ($has_to_date) {
-      $description = 'The ' . $title . ' for the ' . (strpos($key, '_to') ? ' finishing ' : ' starting ') . ' date.';
-    }
-    else {
-      $description = 'The ' . $title . ' for a date.';
-    }
-    if ($key == 'year' || $key == 'year_to') {
-      $size = 'big';
-    }
-    else {
-      $size = 'small';
-    }
-    $schema['columns'][$key] = array(
-      'type' => 'int',
-      'description' => $description,
-      'not null' => FALSE,
-      'default' => NULL,
-      'size' => $size,
-    );
-  }
-
-  return $schema;
-}
+/**
+ * Implements hook_uninstall().
+ * function partial_date_uninstall() - moved to PartialDateTime::delete()
+ */
+ 
diff --git a/partial_date.links.action.yml b/partial_date.links.action.yml
new file mode 100644
index 0000000..2ef705d
--- /dev/null
+++ b/partial_date.links.action.yml
@@ -0,0 +1,5 @@
+entity.partial_date_format.add:
+    route_name: entity.partial_date_format.add_form
+    title: 'Add format'
+    appears_on:
+      - entity.partial_date_format.list
diff --git a/partial_date.links.menu.yml b/partial_date.links.menu.yml
new file mode 100644
index 0000000..b404293
--- /dev/null
+++ b/partial_date.links.menu.yml
@@ -0,0 +1,7 @@
+entity.partial_date_format.list:
+    route_name: entity.partial_date_format.list
+    title: 'Partial date formats'
+    description: 'Configure how partial dates are displayed.'
+    parent: system.admin_config_regional
+    weight: -5
+
diff --git a/partial_date.links.task.yml b/partial_date.links.task.yml
new file mode 100644
index 0000000..8c23597
--- /dev/null
+++ b/partial_date.links.task.yml
@@ -0,0 +1,17 @@
+partial_date_format:
+    route_name: entity.partial_date_format.list
+    title: 'Partial date formats'
+#    base_route: system.admin_config_regional
+    base_route: partial_date_format
+
+#partial_date_format.list:
+#    route_name: entity.partial_date_format.list
+#    title: 'Partial date formats'
+##    parent_id: partial_date_format
+#    base_route: partial_date_format
+
+partial_date_format.settings:
+    route_name: partial_date_format.settings
+    title: 'Common settings'
+#    parent_id: partial_date_format
+    base_route: partial_date_format
diff --git a/partial_date.module b/partial_date.module
index 80338e0..c1cf8cc 100644
--- a/partial_date.module
+++ b/partial_date.module
@@ -2,1113 +2,873 @@
 
 /**
  * @file
- * Provides date fields that allows users to supply dates without specifying
- * actual individual date components.
+ * Defines a date element that allows for any combination of date granularity
+ * settings.
  *
- * Some of the code was modified from the zend framework Zend_Date class:
+ * Some of the core time handling code was inspired by the zend framework's
+ * Zend_Date class:
  *
+ * @see
  * http://framework.zend.com/code/filedetails.php?repname=Zend+Framework&path=%2Ftrunk%2Flibrary%2FZend%2FDate%2FDateObject.php&peg=22321
  */
 
 /**
- * Helper constants to define limits.
- *
- * Setting to the something huge like 999999999999 should be OK, which would
- * be needed for things like the scienific age of the universe. +/- 2000 years
- * do not calculate leap years etc, and use a fixed number of seconds per year
- * based on the length of the tropical year in 2000.
+ * TODO, account for that fact that there is no year 0 in the Gregorian calendar
+ *  AD 1 = year 1, 1 BC = year 0, 2 BC = year −1,
+ */
+
+/**
+ * Implementation of hook_menu() moved to
+ *   - partial_date.routing.yml
+ *   - partial_date.links.action.yml
+ *   - partial_date.links.menu.yml
+ *   - partial_date.links.task.yml
  */
-define('PARTIAL_DATE_YEAR_MIN', -999999999999);
-define('PARTIAL_DATE_YEAR_MAX', 999999999999);
 
-// Outside of the 0AD to 3999AD, leap years are ignored and a set number
-// of seconds per year are used to calculate the number seconds per year for
-// the timestamp estimations. This is a float column, so the percision of this
-// should be calculated to decide if this can be reduced even more.
-// This is based on a tropical year in the year 2000
-define('PARTIAL_DATE_SEC_PER_YEAR', 31556925);
+
+################################################################################
+#                                                                              #
+#  Field API Hooks & Helpers: Fields                                           #
+#                                                                              #
+#  --------------------------------------------------------------------------  #
+#                                                                              #
+#  Implements:                                                                 #
+#   - hook_field_info()                                                        #
+#   * hook_field_settings_form()                                               #
+#   * hook_field_instance_settings_form()                                      #
+#   * hook_field_load()                                                        #
+#   * hook_field_validate()                                                    #
+#   - hook_field_is_empty()                                                    #
+#   * hook_field_presave()                                                     #
+#                                                                              #
+#  Helpers:                                                                    #
+#   * partial_date_field_estimates_settings_form()                             #
+#                                                                              #
+#     Shared field and instance FAPI elements for for date range lists.        #
+#                                                                              #
+#   * partial_date_field_estimates_validate_parse_options()                    #
+#                                                                              #
+#     Shared field and instance setting for for date component range lists.    #
+#                                                                              #
+#   * partial_date_field_estimates()                                           #
+#                                                                              #
+#     Helper function to load the estimate options from the field              #
+#                                                                              #
+#   * partial_date_field_populate_components()                                 #
+#                                                                              #
+#     Helper for hook_field_presave() to populate any missing values prior to  #
+#     generating the float date value estimates. (The fake timestamp columns). #
+#                                                                              #
+#   * partial_date_field_presave_generate_storage_date()                       #
+#                                                                              #
+#     Helper for hook_field_presave() to ensure that all of the columns are    #
+#     set in the correct position and names for the storage engine.            #
+#                                                                              #
+#   * partial_date_field_validate_year()                                       #
+#                                                                              #
+#     Helper for hook_field_validate() to test that the year in within range.  #
+#                                                                              #
+################################################################################
 
 /**
  * Implements hook_field_info().
+ * function partial_date_field_info() - moved to PartialDateTime "FieldType" annotation
  */
-function partial_date_field_info() {
-  return array(
-    'partial_date' => array(
-      'label' => t('Partial date'),
-      'description' => t('This field stores and renders partial dates.'),
-      'default_widget' => 'partial_date_with_timezone',
-      'default_formatter' => 'partial_date_default',
-      'settings' => array(
-        'year_estimates_values' => "-60000|1600|Pre-colonial\n1500|1599|16th century\n1600|1699|17th century\n1700|1799|18th century\n1800|1899|19th century\n1900|1999|20th century\n2000|2099|21st century",
-      ),
-    ),
-    'partial_date_range' => array(
-      'label' => t('Partial date range'),
-      'description' => t('This field stores and renders partial dates.'),
-      'default_widget' => 'partial_date_with_timezone',
-      'default_formatter' => 'partial_date_default',
-      'settings' => array(
-        'year_estimates_values' => "-60000|1600|Pre-colonial\n1500|1599|16th century\n1600|1699|17th century\n1700|1799|18th century\n1800|1899|19th century\n1900|1999|20th century\n2000|2099|21st century",
-      ),
-    ),
-    'partial_datetime' => array(
-      'label' => t('Partial date and time'),
-      'description' => t('This field stores and renders partial dates.'),
-      'default_widget' => 'partial_date_with_timezone',
-      'default_formatter' => 'partial_date_default',
-      'settings' => array(
-        'year_estimates_values' => "-60000|1600|Pre-colonial\n1500|1599|16th century\n1600|1699|17th century\n1700|1799|18th century\n1800|1899|19th century\n1900|1999|20th century\n2000|2099|21st century",
-      ),
-    ),
-    'partial_datetime_range' => array(
-      'label' => t('Partial date and time range'),
-      'description' => t('This field stores and renders partial dates.'),
-      'default_widget' => 'partial_date_with_timezone',
-      'default_formatter' => 'partial_date_default',
-      'settings' => array(
-        'year_estimates_values' => "-60000|1600|Pre-colonial\n1500|1599|16th century\n1600|1699|17th century\n1700|1799|18th century\n1800|1899|19th century\n1900|1999|20th century\n2000|2099|21st century",
-      ),
-    ),
-  );
-}
-
 
 /**
  * Implements hook_field_settings_form().
+ * function partial_date_field_settings_form($field, $instance, $has_data)
+ *   - moved to PartialDateTime::fieldSettingsForm()
  */
-function partial_date_field_settings_form($field, $instance, $has_data) {
-  $settings = $field['settings'];
-  $form = array();
-
-  $has_date = strpos($field['type'], 'date');
-
-  if ($has_date) {
-    $form['year_estimates_values'] = array(
-      '#type' => 'textarea',
-      '#title' => t('Year approximation values'),
-      '#default_value' => $settings['year_estimates_values'],
-      '#description' => t('Provide relative year approximations for this field. These are added in the format "start|end|label", one per line, where start is the year this period started, end is the end of the period and the label is shown to the user. This field can be overriden in the instance settings, but views integration (once completed) will use the field values.'),
-    );
-  }
-  return $form;
-}
-
+ 
 /**
- * Implements hook_field_presave().
+ * Implements hook_field_load().
  */
-function partial_date_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
-  $has_to_date = strpos($field['type'], 'range');
-  $has_date = strpos($field['type'], 'date');
-  $has_time = strpos($field['type'], 'time');
-
-  // Only time based widgets use the timezone selector.
-  $default_timezone = $has_time ? variable_get('date_default_timezone', @date_default_timezone_get()) : NULL;
-
-  foreach ($items as $delta => $item) {
-    // We need to calculate all components to generate the pusedo-dates for
-    // values with missing components.
-    $components = partial_date_components(TRUE, TRUE, $has_to_date);
-    if ($has_time) {
-      $components = array('timezone' => t('Timezone')) + $components;
-    }
-    foreach ($components as $key => $title) {
-      if ($key == 'timezone') {
-        $timezone = empty($item[$key]) ? $default_timezone : $item[$key];
+function partial_date_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
+  $has_range = strpos($field['type'], '_range');
+  $estimates = partial_date_field_estimates($field);
+
+  foreach ($entities as $id => $entity) {
+    foreach ($items[$id] as $delta => &$item) {
+      $settings = $instances[$id]['widget']['settings'];
+
+      // Generate a cleaner array based storage of the values.
+      $item['data'] = empty($item['data']) ? array() : unserialize($item['data']);
+
+      $item['from'] = array();
+      if ($has_range) {
+        $item['to'] = array();
       }
-      else {
-        // Calculate minimal starting values for empty fields.
-        if (isset($item[$key]) && strlen($item[$key])) {
-          ${$key} = $item[$key];
+      $item['check_approximate'] = empty($item['data']['check_approximate']) ? 0 : 1;
+
+      foreach (partial_date_components() as $key => $title) {
+        $item['from'][$key] = $item[$key];
+        // Clear auto-populated estimate values.
+        if (!empty($item['data'][$key . '_estimate_from_used'])) {
+          $item['from'][$key] = '';
         }
-        else {
-          // Set to times to the maximum possible if not set.
-          if (strpos($key, '_to')) {
-            switch ($key) {
-              case 'year_to':
-                $year_to = PARTIAL_DATE_YEAR_MAX;
-                break;
-
-              case 'month_to':
-                $month_to = 12;
-                break;
-
-              case 'day_to':
-                $month_table = partial_date_months(strlen($item['year_to']) ? $item['year_to'] : NULL);
-                if (isset($month_table[$item['month_to'] - 1])) {
-                  $day_to = $month_table[$item['month_to'] - 1];
-                }
-                else {
-                  $day_to = 31;
-                }
-                break;
-
-              case 'hour_to':
-                $hour_to = 23;
-                break;
-
-              case 'minute_to':
-              case 'second_to':
-                ${$key} = 59;
-                break;
-            }
-          }
-          else {
-            // Set the minimum to the lowest possible value.
-            switch ($key) {
-              case 'year':
-                $year = PARTIAL_DATE_YEAR_MIN;
-                break;
-
-              case 'day':
-              case 'month':
-                ${$key} = 1;
-                break;
-
-              default:
-                ${$key} = 0;
-                break;
-            }
-          }
+
+        unset($item[$key]);
+        if ($key != 'timezone') {
+          $item['from'][$key . '_estimate'] = isset($item['data'][$key . '_estimate']) ? $item['data'][$key . '_estimate'] : '';
+          _partial_date_expand_estimate($key, $item['from'], $estimates);
         }
+        if ($has_range) {
+          $item['to'][$key] = $item[$key . '_to'];
+          unset($item[$key . '_to']);
+          // Clear auto-populated estimate values.
+          if (!empty($item['data'][$key . '_estimate_to_used'])) {
+            $item['to'][$key] = '';
+          }
 
-        // We save empty fields as NULL.
-        if (isset($item[$key]) && !strlen($item[$key])) {
-          $items[$delta][$key] = NULL;
+          if ($key != 'timezone') {
+            $item['to'][$key . '_estimate'] = isset($item['data'][$key . '_to_estimate']) ? $item['data'][$key . '_to_estimate'] : '';
+            _partial_date_expand_estimate($key, $item['to'], $estimates, FALSE);
+          }
         }
       }
     }
+  }
+}
 
-    // Hints are allowed to provide year approximation.
-    if (isset($item['year_estimate']) && !strlen($item['year_estimate'])) {
-      $items[$delta]['year_estimate'] = NULL;
-    }
-    // Provides an approximation with or without any component
-    if (!isset($items[$delta]['year']) && isset($items[$delta]['year_estimate'])) {
-      $year = $items[$delta]['year_estimate'];
-    }
-    $items[$delta]['timestamp'] = partial_date_mktime($hour, $minute, $second, $month, $day, $year, $has_time && $timezone != 'UTC' ? $timezone : NULL);
-    if ($has_to_date) {
-      if (isset($item['year_estimate_to']) && !strlen($item['year_estimate_to'])) {
-        $items[$delta]['year_estimate_to'] = NULL;
-      }
-      if (!isset($items[$delta]['year_to']) && isset($items[$delta]['year_estimate_to'])) {
-        $year_to = $items[$delta]['year_estimate_to'];
-      }
-      $items[$delta]['timestamp_to'] = partial_date_mktime($hour_to, $minute_to, $second_to, $month_to, $day_to, $year_to, $has_time && $timezone != 'UTC' ? $timezone : NULL);
+function _partial_date_expand_estimate($key, &$item, $estimates, $is_start = TRUE) {
+  $item[$key . '_estimate_label'] = '';
+  $item[$key . '_estimate_value'] = NULL;
+
+  $value = $item[$key . '_estimate'];
+  if (!empty($value)) {
+    if (!empty($estimates[$key][$value])) {
+      $item[$key . '_estimate_label'] = $estimates[$key][$value];
     }
+    list($start, $end) = explode('|', $value);
+    $item[$key . '_estimate_value'] = $is_start ? $start : $end;
   }
 }
 
+/**
+ * Helper function to load the estimate options from the field or instance
+ * settings.
+ */
+function partial_date_field_estimates($field) {
+  $config = \Drupal::configFactory()->get('partial_date.settings');
+  return $config->get('estimates');
+}
+
+/**
+ * Implements hook_field_presave().
+ */
+function partial_date_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
+  module_load_include('admin.inc', 'partial_date');
+  _partial_date_field_presave($entity_type, $entity, $field, $instance, $langcode, $items);
+}
 
 /**
  * Implements hook_field_validate().
  *
  * Possible error codes:
- * - 'partial_date_invalid': The partial_date address is not valid
+ * - 'xxxx': The partial_date year is not valid
+ *
+ * @see partial_date_field_widget_error().
  */
 function partial_date_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors) {
-  $has_to_date = strpos($field['type'], 'range');
-  $has_date = strpos($field['type'], 'date');
-  $has_time = strpos($field['type'], 'time');
-
-  // Validate we actually have valid year as an integer value.
-  if (!partial_date_field_validate_year($item, 'year')) {
-    $errors[$field['field_name']][$langcode][$delta][] = array(
-      'error' => 'partial_date_invalid_year_estimate',
-      'message' => $message,
-    );
-  }
+  module_load_include('admin.inc', 'partial_date');
+  _partial_date_field_validate($obj_type, $object, $field, $instance, $langcode, $items, $errors);
+}
 
-  $year_estimates = array();
-  $year_estimate_options = array();
-  if ($instance['widget']['settings']['year_estimates']) {
-    if (!empty($instance['widget']['settings']['year_estimates_values'])) {
-      $year_estimate_options = $instance['widget']['settings']['year_estimates_values'];
-    }
-    elseif (!empty($field['settings']['year_estimates_values'])) {
-      $year_estimate_options = $field['settings']['year_estimates_values'];
-    }
-  }
-  foreach (explode("\n", $year_estimate_options) as $line) {
-    list($start, $end, $label) = explode('|', $line . '||');
-    if ($start && $end && $label) {
-      $year_estimates[] = array($start, $end, $label);
-    }
-  }
+/**
+ * Implements hook_field_is_empty().
+ * function partial_date_field_is_empty($item, $field) - moved to PartialDateTime::isEmpty
+ */
 
-  foreach ($items as $delta => $item) {
-    if (!empty($item['year_estimate']) && !empty($item['year'])) {
-      // Search and validate the first match.
-      foreach ($year_estimates as $line) {
-        if ($line[0] == $item['year_estimate']) {
-          break;
-        }
-      }
-      if ($item['year'] < $line[0] || $item['year'] > $line[1]) {
-        $message = t('Year fields do not match. Year must be between %start and %end if you select %label', array('%start' => $line[0], '%end' => $line[1], '%label' => $line[2]));
-        $errors[$field['field_name']][$langcode][$delta][] = array(
-          'error' => 'partial_date_invalid_year_estimate',
-          'message' => $message,
-        );
-      }
-    }
-    if (!empty($item['year_estimate_to']) && !empty($item['year_to'])) {
-      // Search and validate the first match.
-      foreach ($year_estimates as $line) {
-        if ($line[1] == $item['year_estimate_to']) {
-          break;
-        }
-      }
-      if ($item['year_to'] < $line[0] || $item['year_to'] > $line[1]) {
-        $message = t('Year fields do not match. Year must be between %start and %end if you select %label', array('%start' => $line[0], '%end' => $line[1], '%label' => $line[2]));
-        $errors[$field['field_name']][$langcode][$delta][] = array(
-          'error' => 'partial_date_invalid_year_estimate_to',
-          'message' => $message,
-        );
-      }
-    }
+################################################################################
+#  ---------------------------------                                           #
+#  Field API Hooks & Helpers: Widget                                           #
+#  ---------------------------------                                           #
+#                                                                              #
+#  Implements:                                                                 #
+#   * hook_field_widget_info()                                                 #
+#   * hook_field_widget_settings_form()                                        #
+#   * hook_field_widget_form()                                                 #
+#   * hook_field_widget_error()                                                #
+#                                                                              #
+#  Helpers:                                                                    #
+#   * partial_date_field_widget_reduce_date_components()                                             #
+#     This reduces all possible widget components into a singular array of     #
+#     components. Returns FALSE if empty.                                      #
+#                                                                              #
+################################################################################
 
-    /*
-    if ($item['partial_date'] != '' && !valid_partial_date_address(trim($item['partial_date']))) {
-    }
-    */
-  }
-}
+/**
+ * Implements hook_field_widget_info().
+ * partial_date_field_widget_info() - moved to PartialDateWidget annotation
+ */
+/**
+ * Implements hook_field_widget_settings_form().
+ * function partial_date_field_widget_settings_form($field, $instance)
+ *   - moved to PartialDateWidget::settingsForm
+ */
 
-function partial_date_field_validate_year($item, $key) {
-  if (isset($item[$key]) && strlen($item[$key])) {
-    $year = $item[$key];
-    // Validate that it is a real integer.
-    if ((string) $year === (string) (int) $year) {
-      if ($year < PARTIAL_DATE_YEAR_MIN || $year > PARTIAL_DATE_YEAR_MAX) {
-        return;
-      }
-    }
-    return t('Year must be an integer value between %start and %end.', array('%start' => PARTIAL_DATE_YEAR_MIN, '%end' => PARTIAL_DATE_YEAR_MAX));
-  }
-}
+/**
+ * Implements hook_field_widget_form().
+ * function partial_date_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base)
+ *   - moved to PartialDateWidget::formElement
+ */
 
 /**
  * Implements hook_field_widget_error().
+ * function partial_date_field_widget_error($element, $error, $form, &$form_state)
+ *   - moved to PartialDateWidget::errorElement
  */
-function partial_date_field_widget_error($element, $error, $form, &$form_state) {
-  switch ($error['error']) {
-    case 'partial_date_invalid_year_estimate':
-      form_error($element['year'], $error['message']);
-      break;
 
-    case 'partial_date_invalid_year_estimate_to':
-      form_error($element['year_to'], $error['message']);
-      break;
+################################################################################
+#  ------------------------------------                                        #
+#  Field API Hooks & Helpers: Formatter                                        #
+#  ------------------------------------                                        #
+#                                                                              #
+#  Implements:                                                                 #
+#   * hook_field_formatter_info()                                              #
+#   * hook_field_formatter_settings_form()                                     #
+#   * hook_field_formatter_settings_summary()                                  #
+#   * hook_field_formatter_view()                                              #
+#                                                                              #
+#  Drupal 8:                                                                   #
+#   * PartialDateFormatter annotation                                          #
+#   * PartialDateFormatter::settingsForm                                       #
+#   * PartialDateFormatter::settingsSummary                                    #
+#   * PartialDateFormatter::viewElements                                       #
+#                                                                              #
+################################################################################
+
+/**
+ * Implements hook_field_formatter_info().
+ * function partial_date_field_formatter_info()  - moved to PartialDateFormatter annotation
+ */
 
-    default:
-      form_error($element, $error['message']);
-      break;
-  }
-}
 
 /**
- * Implements hook_content_is_empty().
+ * Implements hook_field_formatter_settings_form().
+ * function partial_date_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state)
+ *   - moved to PartialDateFormatter::settingsForm
  */
-function partial_date_field_is_empty($item, $field) {
-  // We need to support year 0.
-  if (!is_array($item) || (isset($item['_remove']) && $item['_remove'])) {
-    return TRUE;
-  }
-  if (strpos($field['type'], 'range')) {
-    if (strlen($item['year_to']) || !empty($item['month_to']) || !empty($item['day_to'])) {
-      return FALSE;
-    }
 
-    if (isset($item['year_estimate_to']) && strlen($item['year_estimate_to'])) {
-      return FALSE;
-    }
-  }
-  if (isset($item['year_estimate']) && strlen($item['year_estimate'])) {
-    return FALSE;
-  }
-  return (!isset($item['year']) || !strlen($item['year'])) && empty($item['month']) && empty($item['day']);
-}
+/**
+ * Implements hook_field_formatter_settings_summary().
+ * function partial_date_field_formatter_settings_summary($field, $instance, $view_mode)
+ *   - moved to PartialDateFormatter::settingsSummary
+ */
 
 /**
- * Implements hook_field_widget_info().
+ * Implements hook_field_formatter_view().
+ * function partial_date_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) 
+ *    - moved to PartialDateFormatter::viewElements
+ */
+
+################################################################################
+#  --------------------------                                                  #
+#  Theming related functions:                                                  #
+#  --------------------------                                                  #
+#                                                                              #
+#  Implements:                                                                 #
+#   * hook_theme()                                                             #
+#                                                                              #
+#  Theming functions:                                                          #
+#   * theme_partial_date()                                                     #
+#   * theme_partial_date_long_date_format()                                    #
+#   * theme_partial_date_medium_date_format()                                  #
+#   * theme_partial_date_short_date_format()                                   #
+#                                                                              #
+#  Helpers:                                                                    #
+#   * partial_date_reduce_range_values()                                       #
+#     Reduces the from date component array so that individual components that #
+#     are common to both are not repeated.                                     #
+#                                                                              #
+################################################################################
+
+/**
+ * Implements hook_theme().
  */
-function partial_date_field_widget_info() {
+function partial_date_theme() {
   return array(
-    'partial_date_with_timezone' => array(
-      'label' => t('Partial date with timezone'),
-      'field types' => array('partial_date', 'partial_date_range', 'partial_datetime', 'partial_datetime_range'),
-      'settings' => array(
-        'year_estimates' => 0,
-        'range_empty_start' => 1,
-        'year_estimates_values' => '',
-        'tz_handling' => 'date',
-        'theme_overrides' => array('txt_short' => 0, 'txt_long' => 0),
-        'granularity' => drupal_map_assoc(array_keys(date_granularity_names())),
-      ),
+    'partial_date_element' => array(
+      'render element' => 'element',
+    ),
+    'partial_date_range_inline_element' => array(
+      'render element' => 'element',
+      'file' => 'partial_date.theme.inc',
+    ),
+    'partial_date' => array(
+      'variables' => array('item' => NULL, 'format' => 'short', 'settings' => array()),
+    ),
+    'partial_date_range' => array(
+      'variables' => array('from' => NULL, 'to' => NULL, 'settings' => array()),
+    ),
+    'partial_date_format_settings_form' => array(
+      'render element' => 'form',
+      'file' => 'partial_date.pages.inc',
+    ),
+    'partial_date_inline_form_element' => array(
+      'render element' => 'element',
+      'file' => 'partial_date.theme.inc',
     ),
   );
 }
 
+
 /**
- * Implements hook_field_widget_settings_form().
+ * The theme wrapper for a single date component.
+ * todo: floating support.
  */
-function partial_date_field_widget_settings_form($field, $instance) {
-  $widget = $instance['widget'];
-  $settings = $widget['settings'];
-  $form = array();
-
-  $has_date = strpos($field['type'], 'date');
-  $has_range = strpos($field['type'], 'range');
-  $has_time = strpos($field['type'], 'time');
-
-  $options = date_granularity_names();
-  if (!$has_date) {
-    unset($options['year']);
-    unset($options['month']);
-    unset($options['day']);
-  }
-  if (!$has_time) {
-    unset($options['minute']);
-    unset($options['hour']);
-    unset($options['second']);
-  }
-  $form['granularity'] = array(
-    '#type' => 'checkboxes',
-    '#title' => t('Date attributes to collect'),
-    '#default_value' => $settings['granularity'],
-    '#options' => $options,
-    '#attributes' => array('class' => array('container-inline')),
-    '#description' => t('Select the date attributes to collect and store.'),
-  );
-  if ($has_date) {
-    $form['year_estimates'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Use year approximations'),
-      '#default_value' => $settings['year_estimates'],
-    );
-    $form['year_estimates_values'] = array(
-      '#type' => 'textarea',
-      '#title' => t('Year approximation values'),
-      '#default_value' => $settings['year_estimates_values'],
-      '#description' => t('Provide relative year approximations for this field. These are added in the format "start|end|label", one per line, where start is the year this period started, end is the end of the period and the label is shown to the user.'),
-    );
-  }
-  if ($has_range) {
-    /*
-    $form['range_empty_start'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Allow empty start date'),
-      '#default_value' => $settings['range_empty_start'],
-    );
-    */
-  }
-  if ($has_time) {
-    $form['tz_handling'] = array(
-      '#type' => 'select',
-      '#title' => t('Time zone handling'),
-      '#default_value' => $settings['tz_handling'],
-      '#options' => partial_date_timezone_handling_options(),
-      '#description' => t('Select the timezone handling method for this field. Currently, this is only used to calculate the timestamp that is store in the database. This determines the sorting order when using views integration.'),
-    );
-  }
-  $form['theme_overrides'] = array('#tree' => TRUE);
-  $form['theme_overrides']['txt_short'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Provide a textfield for collection of a short description of the date'),
-    '#default_value' => $settings['theme_overrides']['txt_short'],
-  );
-  $form['theme_overrides']['txt_long'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Provide a textfield for collection of a long description of the date'),
-    '#default_value' => $settings['theme_overrides']['txt_long'],
-  );
-
-  return $form;
+function theme_partial_date_element($variables) {
+  $element = $variables['element'];
+  return '<div class="partial-date-element clearfix">' . drupal_render_children($element) . '</div>';
 }
 
-function partial_date_timezone_handling_options() {
-  return array(
-    'date' => t('User selectable'),
-    'site' => t("Site's time zone"),
-    'user' => t("User's time zone"),
-    'utc' => 'UTC (none)',
-  );
+function theme_partial_date_range($variables) {
+  $to = $variables['to'];
+  $from = $variables['from'];
+  $settings = $variables['settings'];
+  $separator = '';
+//TODO "read range separator from partial_date.format.???.separators.range:"
+//  if (!empty($settings['component_settings'])
+//    && !empty($settings['component_settings']['separator'])
+//    && !empty($settings['component_settings']['separator']['range'])) {
+//    $separator = $settings['component_settings']['separator']['range'];
+//  }
+  if (!strlen($separator)) {
+    $separator = t(' to ', array(), array('context' => 'datetime'));
+  }
+  return t('@from@separator@to', array('@from' => $from, '@to' => $to, '@separator' => $separator));
 }
 
 /**
- * Implements hook_field_widget_form().
+ * TODO
+ *
+ * Template preprocess function to add theme suggestions for the various
+ * partial date format types.
  */
-function partial_date_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
-  // Fix the title on multi-value fields.
-  if (empty($base['#title'])) {
-    $base['#title_display'] = 'invisible';
-  }
-  $has_time = strpos($field['type'], 'time');
-  $has_range = strpos($field['type'], 'range');
 
-  if ($has_time) {
-    $base['#type'] = $has_range ? 'partial_datetime_range_element' : 'partial_datetime_element';
-  }
-  else {
-    $base['#type'] = $has_range ? 'partial_date_range_element' : 'partial_date_element';
-  }
-  $base['#default_value'] = isset($items[$delta]) ? $items[$delta] : ($delta != 0 && !empty($instance['default_value'][0]) ? $instance['default_value'][0] : NULL);
-  $settings = $instance['widget']['settings'];
-  $field_settings = $field['settings'];
-
-  $base['#granularity'] = $settings['granularity'];
+/**
+ * The partial date theme callback.
+ *
+ * Allows easy override of the format if required.
+ */
+function theme_partial_date($variables) {
+  $item = $variables['item'];
+  $settings = $variables['settings'];
+  $settings['format'] = $variables['format'];
+  $settings['is_approximate'] = !empty($variables['is_approximate']);
+  return partial_date_format($item, $settings);
+}
 
-  // See if we add a approx. year select list
-  if ($settings['year_estimates']) {
-    if (!empty($settings['year_estimates_values'])) {
-      $base['#year_estimates'] = $settings['year_estimates_values'];
-    }
-    elseif (!empty($field_settings['year_estimates_values'])) {
-      $base['#year_estimates'] = $field_settings['year_estimates_values'];
+function partial_date_reduce_range_values(&$from, &$to) {
+  // Reduce dates on granularity values.
+  foreach (array_keys(partial_date_components()) as $key) {
+    // Excat match as we need to compare '' to 0.
+    if (!isset($from[$key]) && !isset($to[$key])) {
+      continue;
     }
-  }
-
-  // If a time field, should we add the timezone?
-  if ($has_time) {
-    // Selectable timezone
-    $base['#timezone'] = ($settings['tz_handling'] == 'date');
-    switch ($settings['tz_handling']) {
-      case 'utc':
-        $base['#default_value']['timezone'] = 'UTC';
-        break;
-
-      case 'site':
-        $base['#default_value']['timezone'] = variable_get('date_default_timezone', date_default_timezone_get());
-        break;
-
-      case 'user':
-        $base['#default_value']['timezone'] = date_default_timezone();
-        break;
-
+    elseif ((isset($from[$key]) || !isset($to[$key])) || $from[$key] !== $to[$key]) {
+      break;
     }
+    $from[$key] = NULL;
   }
-
-  $base['#txt_short'] = !empty($settings['theme_overrides']['txt_short' ]);
-  $base['#txt_long'] = !empty($settings['theme_overrides']['txt_long' ]);
-
-  return $base;
 }
 
+################################################################################
+#  --------------------------                                                  #
+#  Element Related Functions:                                                  #
+#  --------------------------                                                  #
+#                                                                              #
+#  Implements:                                                                 #
+#   * hook_element_info()                                                      #
+#      - moved to PartialDateElement class
+#                                                                              #
+################################################################################
+//
+///**
+// * Implements hook_element_info().
+// *
+// * Provides a singular element that can handle all of the implemented partial
+// * date components; datetime granularility and timezone components.
+// */
+//function partial_date_element_info() {
+//  $types = array();
+//  $types['partial_datetime_element'] = array(
+//    '#input' => TRUE,
+//    '#element_validate' => array('partial_date_element_validate'),
+//    '#process' => array('partial_date_element_process'),
+//    '#theme' => 'partial_date_element',
+//    '#theme_wrappers' => array('form_element'),
+//  );
+//  return $types;
+//}
+
+################################################################################
+#  ------------------                                                          #
+#  Views Integration:                                                          #
+#  ------------------                                                          #
+################################################################################
+
 /**
- * Implements hook_field_formatter_info().
+ * Implements hook_views_api().
  */
-function partial_date_field_formatter_info() {
-  $formats = array(
-    'partial_date_default' => array(
-      'label' => t('Default'),
-      'description' => t('Display the partial date.'),
-      'field types' => array('partial_date', 'partial_date_range', 'partial_datetime', 'partial_datetime_range'),
-      'settings' => array('format' => 'medium', 'use_override' => 'none'),
-    ),
+function partial_date_views_api() {
+  return array(
+    'api' => 3,
+    'path' => drupal_get_path('module', 'partial_date') . '/includes',
   );
-
-  return $formats;
 }
 
+################################################################################
+#  ----------------------                                                      #
+#  API related functions:                                                      #
+#  ----------------------                                                      #
+#                                                                              #
+#  Note: It would be great to move these to the date_api.                      #
+#                                                                              #
+#  Main functions include:                                                     #
+#   * partial_date_components()                                                #
+#     Returns the date and time values used by the module.                     #
+#     This controls almost everything, from defining the schema to controlling #
+#     the output of the formatters.                                            #
+#                                                                              #
+#   * partial_date_day_ordinal_suffix()                                        #
+#     Returns the translated English ordinal suffix for a given day.           #
+#                                                                              #
+#   * partial_date_granularity_field_options()                                 #
+#     Returns select options for various components.                           #
+#                                                                              #
+#   * partial_date_is_leap_year()                                              #
+#     Checks to see if the specified year is a leap year.                      #
+#                                                                              #
+#   * partial_date_mktime()                                                    #
+#     Returns a timestamp (int / float) based on the available components.     #
+#                                                                              #
+#   * partial_date_month_abbreviations()                                       #
+#     Returns an option list of month abbreviations.                           #
+#                                                                              #
+#   * partial_date_month_matrix()                                              #
+#     Returns the valid month lengths based of the specified year.             #
+#                                                                              #
+#   * partial_date_timezone_handling_correlation()                             #
+#     Forces a given timezone into the specified timezone handling option.     #
+#                                                                              #
+#   * partial_date_timezone_option_is_selectable()                             #
+#     Determines if the timezone component should be rendered.                 #
+#                                                                              #
+#   * partial_date_timezone_handling_options()                                 #
+#     Returns an option list of supported timezone handling options.           #
+#                                                                              #
+#   * partial_date_year_designation_decorator()                                #
+#     Returns the year with the appropriative designation added.               #
+#                                                                              #
+#   * partial_date_year_designation_options()                                  #
+#     Returns an option list of supported year designations.                   #
+#                                                                              #
+################################################################################
+
 /**
- * Implements hook_field_formatter_view().
+ * The minimum year that the module supports.
+ *
+ * Modifying this will alter how new timestamps are stored in the database.
+ *
+ * Setting to the something huge like 999999999999 should be OK, which would
+ * be needed for things like the scienific age of the universe. +/- 2000 years
+ * do not calculate leap years etc, and use a fixed number of seconds per year
+ * based on the length of the tropical year in 2000.
+ *
+ * @var int
  */
-function partial_date_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
-  $has_to_date = strpos($field['type'], 'range');
-  $has_date = strpos($field['type'], 'date');
-  $has_time = strpos($field['type'], 'time');
-  $element = array();
-  foreach ($items as $delta => $item) {
-    $from = _partial_date_extract_components($item);
-    $to = _partial_date_extract_components($item, '_to');
-    if ($to) {
-      if ($from) {
-        if ($from['year'] == $to['year']) {
-          $from['year'] = NULL;
-          if ($from['month'] == $to['month']) {
-            $from['month'] = NULL;
-            if ($from['day'] == $to['day']) {
-              $from['day'] = NULL;
-            }
-          }
-        }
-      }
-    }
-
-    $f = $t = '';
-    $override = FALSE;
-    switch ($display['settings']['use_override']) {
-      case 'short':
-        if (!empty($item['txt_short'])) {
-          $override = $item['txt_short'];
-        }
-        break;
-      case 'long':
-        if (!empty($item['txt_long'])) {
-          $override = $item['txt_long'];
-        }
-        break;
-
-      case 'long_short':
-        if (!empty($item['txt_long'])) {
-          $override = $item['txt_long'];
-        }
-        elseif (!empty($item['txt_short'])) {
-          $override = $item['txt_short'];
-        }
-
-      case 'short_long':
-        if (!empty($item['txt_short'])) {
-          $override = $item['txt_short'];
-        }
-        elseif (!empty($item['txt_long'])) {
-          $override = $item['txt_long'];
-        }
-        break;
-    }
-
-    if ($override) {
-      $element[$delta] = array('#markup' => check_plain($override));
-    }
-    else {
-      switch ($display['settings']['format']) {
-        case 'long':
-          if ($from) {
-            $f = theme('partial_date_long_date_format', array('item' => $from));
-          }
-          if (!empty($to)) {
-            $t = theme('partial_date_long_date_format', array('item' => $to));
-          }
-          break;
+define('PD2_YEAR_MIN', -999999999999);
 
-        case 'short':
-          if ($from) {
-            $f = theme('partial_date_short_date_format', array('item' => $from));
-          }
-          if (!empty($to)) {
-            $t = theme('partial_date_short_date_format', array('item' => $to));
-          }
-          break;
-
-        case 'medium':
-        default:
-          if ($from) {
-            $f = theme('partial_date_medium_date_format', array('item' => $from));
-          }
-          if (!empty($to)) {
-            $t = theme('partial_date_medium_date_format', array('item' => $to));
-          }
-          break;
-
-      }
-      if ($f && $t) {
-        $element[$delta] = array('#markup' => $f . ' to ' . $t);
-      }
-      elseif ($f xor $t) {
-        $element[$delta] = array('#markup' => $f ? $f : $t);
-      }
-    }
-  }
+/**
+ * The maximum year that the module supports.
+ *
+ * Modifying this will alter how new timestamps are stored in the database.
+ *
+ * @var int
+ */
+define('PD2_YEAR_MAX', 999999999999);
 
-  return $element;
-}
+/**
+ * The number of seconds for a tropical year in 2000.
+ *
+ * Outside of the 1AD to 3999AD, leap years are ignored and a set number of
+ * seconds per year are used to calculate the number seconds per year for the
+ * timestamp estimations. This is a float column, so the percision of this
+ * should be calculated to decide if this can be reduced even more.
+ *
+ * @var int
+ */
+define('PD2_SEC_PER_YEAR', 31556925);
 
-function _partial_date_extract_components($item, $suffix = '') {
-  $components = array();
-  foreach (date_granularity_names() as $key => $title) {
-    $components[$key] = isset($item[$key . $suffix]) && strlen($item[$key . $suffix]) ? $item[$key . $suffix] : NULL;
-  }
-  if (!isset($components['year']) && isset($item['year_estimate' . $suffix])) {
-    $components['year'] = $item['year_estimate' . $suffix];
+/**
+ * These are the core components that always exist, but are shown or hidden
+ * depending on the selected field settings.
+ */
+function partial_date_components(array $excluded_components = NULL) {
+  static $components = NULL;
+  if (!isset($components)) {
+    $components = array(
+      'year' => t('Year', array(), array('context' => 'datetime')),
+      'month' => t('Month', array(), array('context' => 'datetime')),
+      'day' => t('Day', array(), array('context' => 'datetime')),
+      'hour' => t('Hour', array(), array('context' => 'datetime')),
+      'minute' => t('Minute', array(), array('context' => 'datetime')),
+      'second' => t('Second', array(), array('context' => 'datetime')),
+      'timezone' => t('Timezone', array(), array('context' => 'datetime')),
+    );
   }
-  $test = array_filter($components);
-  if (empty($test)) {
-    return FALSE;
+  if ($excluded_components) {
+    return array_diff_key($components, array_flip($excluded_components));
   }
+
   return $components;
 }
 
 /**
- * Implements hook_theme().
+ * Returns a translated array of timezone handling options.
+ *
+ * Currently, this is a copy of the Dates module options.
  */
-function partial_date_theme() {
+function partial_date_timezone_handling_options() {
   return array(
-    'partial_date' => array('render element' => 'element'),
-    'partial_date_short_date_format' => array('render element' => 'item'),
-    'partial_date_medium_date_format' => array('render element' => 'item'),
-    'partial_date_long_date_format' => array('render element' => 'item'),
+    'none' => t('No timezone conversion'),
+    'date' => t('User selectable', array(), array('context' => 'datetime')),
+    'site' => t("Site's timezone"),
+    'user' => t("User's account timezone"),
+    'utc' => t('UTC', array(), array('context' => 'datetime')),
   );
 }
-function theme_partial_date($variables) {
-  $element = $variables['element'];
-  return '<div class="partial-date-element clearfix">' . drupal_render_children($element) . '</div>';
+
+/**
+ * Helper function to control how and if the timezone component should be
+ * rendered.
+ */
+function partial_date_timezone_option_is_selectable($tz_handling) {
+  return ($tz_handling == 'none' || $tz_handling == 'date');
 }
 
-function theme_partial_date_long_date_format($variables) {
-  $item = $variables['item'];
-  $info = array();
-  if (!empty($item['day'])) {
-    $info[] = $item['day'] . partial_date_suffix($item['day']);
-  }
-  if (!empty($item['month'])) {
-    $months = date_month_names();
-    $info[] = $months[$item['month']];
-  }
-  if (isset($item['year']) && strlen($item['year'])) {
-    if ($item['year'] < 0) {
-      $info[] = abs($item['year']) . 'BC';
-    }
-    else {
-      $info[] = $item['year'];
-    }
+/**
+ * Helper function to determine the correct timezone based on the timezone
+ * handling options used.
+ *
+ * @param string $timezone
+ *   Current timezone from the database or widget.
+ *
+ * @param string $tz_handling
+ *   The timezone handling options that needs enforcing.
+ */
+function partial_date_timezone_handling_correlation($timezone = '', $tz_handling = 'none') {
+  $user = \Drupal::currentUser();
+
+  // Override or return unchanged depending on the set action.
+  switch ($tz_handling) {
+    case 'utc':
+      return 'UTC';
+
+    case 'site':
+      $config = \Drupal::config('system.date');
+      $default_timezone = $config->get('timezone.default');
+      return !empty($default_timezone) ? $default_timezone : @date_default_timezone_get();
+
+    case 'user':
+      return drupal_get_user_timezone();
+
+    case 'date':
+    case 'none':
+      // Parse the existing timezone.
+      $timezone = isset($timezone) ? $timezone : '';
+      switch ($timezone) {
+        case '--user--':
+        case '--site--':
+          $timezone = partial_date_timezone_handling_correlation($timezone, trim($timezone, '-'));
+          break;
+      }
+      return $timezone;
+
+    default:
+      return '';
+
   }
-  return implode(' ', $info);
 }
 
-function theme_partial_date_medium_date_format($variables) {
-  $item = $variables['item'];
+/**
+ * Returns option lists for the various components, with the exception of year
+ * which is not supported.
+ *
+ * @param string $type
+ *   One of the date granularity keys: year, month, day, etc.
+ * @param array $options
+ *   Additional values to prefix onto the options list.
+ */
+function partial_date_granularity_field_options($type, $options = array(), $increment = 1) {
+  switch ($type) {
+    case 'second':
+    case 'minute':
+      return $options + date_minutes('i', FALSE, $increment);
 
-  $info = array();
-  if (!empty($item['day'])) {
-    $info[] = $item['day'];
-  }
-  if (!empty($item['month'])) {
-    $months = date_month_names();
-    $info[] = $months[$item['month']];
-  }
-  if (isset($item['year']) && strlen($item['year'])) {
-    if ($item['year'] < 0) {
-      $info[] = abs($item['year']) . 'BC';
-    }
-    else {
-      $info[] = $item['year'];
-    }
-  }
-  return implode(' ', $info);
+    case 'hour':
+      return $options + array_combine(range(0, 23), range(0, 23));
 
-}
+    case 'day':
+      return $options + array_combine(range(1, 31), range(1, 31));
 
-function theme_partial_date_short_date_format($variables) {
-  $item = $variables['item'];
+    case 'month':
+      return $options + array_combine(range(1, 12), range(1, 12));
 
-  $info = array();
-  if (!empty($item['day'])) {
-    $info[] = $item['day'];
-  }
-  if (!empty($item['month'])) {
-    $months = partial_date_month_short_names();
-    $info[] = $months[$item['month']];
+    case 'timezone':
+      // Ref: Date API module
+      return $options + date_timezone_names(TRUE);
+
+    case 'year':
+    default:
+      return $options;
   }
-  if (isset($item['year']) && strlen($item['year'])) {
-    if ($item['year'] < 0) {
-      $info[] = abs($item['year']) . 'BC';
-    }
-    else {
-      $info[] = $item['year'];
-    }
+}
+
+/**
+ * Maps out the valid month ranges for a given year.
+ *
+ * @param int $year
+ * @return array
+ *   Note, there is no array index.
+ */
+function partial_date_month_matrix($year = NULL) {
+  if ($year && partial_date_is_leap_year($year)) {
+    return array(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
   }
-  return implode(' ', $info);
+  return array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
 }
 
 /**
- * Returns a translated array of month names.
+ * Returns a translated array of short month names.
  */
-function partial_date_month_short_names() {
+function partial_date_month_abbreviations($month) {
   static $month_names;
   if (empty($month_names)) {
     $month_names = array(
       1 => 'Jan', 2 => 'Feb', 3 => 'Mar', 4 => 'Apr', 5 => 'May', 6 => 'Jun',
       7 => 'Jul', 8 => 'Aug', 9 => 'Sep', 10 => 'Oct', 11 => 'Nov', 12 => 'Dec');
-    foreach ($month_names as $key => $month) {
-      $month_names[$key] = t($month, array(), array('context' => 'Short month name'));
+    foreach ($month_names as $key => $month_name) {
+      $month_names[$key] = t($month_name, array(), array('context' => 'datetime'));
     }
   }
+  if ($month) {
+    return $month_names[$month];
+  }
   return $month_names;
 }
 
-function partial_date_suffix($day) {
-  $mod = $day % 10;
-  if ($mod == 1) {
-    return 'st';
-  }
-  else if (($mod == 2) and ($day != 12)) {
-    return 'nd';
-  }
-  else if ($mod == 3) {
-    return 'rd';
+/**
+ * Returns a translated array of month names.
+ */
+function partial_date_month_names($month) {
+  static $month_names;
+  if (empty($month_names)) {
+    $month_names = array(
+      1 => 'January', 2 => 'February', 3 => 'March', 4 => 'April', 5 => 'May',
+      6 => 'June', 7 => 'July', 8 => 'August', 9 => 'September',
+      10 => 'October', 11 => 'November', 12 => 'December');
+
+    foreach ($month_names as $key => $month_name) {
+      $month_names[$key] = t($month_name, array(), array('context' => 'datetime'));
+    }
   }
-  else {
-    return 'th';
+  if ($month) {
+    return $month_names[$month];
   }
+  return $month_names;
 }
 
 /**
- * Implements hook_field_formatter_settings_form().
+ * Returns a translated array of weekday names.
  */
-function partial_date_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
-  $display = $instance['display'][$view_mode];
-  $settings = $display['settings'];
-
-  $element = array();
-
-  $element['format'] = array(
-    '#title' => t('Date format'),
-    '#type' => 'select',
-    '#default_value' => $settings['format'],
-    '#required' => TRUE,
-    '#options' => partial_date_format_options(),
-  );
-  $element['use_override'] = array(
-    '#title' => t('Use date descriptions rather than date'),
-    '#type' => 'radios',
-    '#default_value' => $settings['use_override'],
-    '#required' => TRUE,
-    '#options' => partial_date_txt_override_options(),
-    '#description' => t('This setting allows date values to be replaced with user specified date descriptions, if applicable. This will use the first non-empty value.'),
-  );
-  return $element;
-}
-function partial_date_txt_override_options() {
-  return array(
-    'none' => t('Use date only'),
-    'short' => t('Use short description'),
-    'long' => t('Use long description'),
-    'long_short' => t('Use long or short description'),
-    'short_long' => t('Use short or long description'),
-  );
-}
-function partial_date_format_options() {
-  return array(
-    'short' => t('Short'),
-    'medium' => t('Medium'),
-    'long' => t('Long'),
-  );
-}
-/**
- * Implements hook_field_formatter_settings_summary().
- */
-function partial_date_field_formatter_settings_summary($field, $instance, $view_mode) {
-  $display = $instance['display'][$view_mode];
-  $settings = $display['settings'];
-
-  $types = partial_date_format_options();
-  $summary = t('Format') . ': ' . $types[$settings['format']];
-  $txt_overrides = partial_date_txt_override_options();
-  $summary .= ' ' . t('User text') . ': ' . $txt_overrides[$settings['use_override']];
-  return $summary;
+function partial_date_weekday_name_abbreviations($week_day_number, $length = 3) {
+  $name = partial_date_weekday_names($week_day_number);
+  if (\Drupal\Component\Utility\Unicode::strlen($name) > $length) {
+    return \Drupal\Component\Utility\Unicode::substr($name, 0, $length);
+  }
+  return $name;
 }
 
 /**
- * Implements hook_element_info().
- *
- * Provides multiple elements, but these share the same processing. Having the
- * strings date, time and range control the processing of the element.
+ * Returns a translated array of weekday names.
  */
-function partial_date_element_info() {
-  $types = array();
-  foreach (array('date', 'date_range', 'datetime', 'datetime_range') as $key) {
-    $types['partial_' . $key . '_element'] = array(
-      '#input' => TRUE,
-      '#element_validate' => array('partial_date_validate'),
-      '#process' => array('partial_date_element_process'),
-      '#theme' => 'partial_date',
-      '#theme_wrappers' => array('form_element'),
-    );
+function partial_date_weekday_names($week_day_number) {
+  static $day_names;
+  if (empty($day_names)) {
+    $day_names = array(
+      0 => 'Sunday', 1 => 'Monday', 2 => 'Tuesday', 3 => 'Wednesday',
+      4 => 'Thursday', 5 => 'Friday', 6 => 'Saturday');
+
+    foreach ($day_names as $key => $day_name) {
+      $day_names[$key] = t($day_name, array(), array('context' => 'datetime'));
+    }
+  }
+  if ($week_day_number) {
+    return $day_names[$week_day_number];
   }
-  return $types;
+  return $day_names;
 }
 
 /**
- * TODO: Validates the date type to stop dates like February 30, 2006.
+ * Decorates a year with the given year designations.
+ *
+ * As there is no year 0, so an empty year will return an empty string.
  */
-function partial_date_validate($element) {
-  if (!empty($element['#required']) && partial_date_field_is_empty($element['#value'], array('type' => $element['#type']))) {
-    form_error($element, t('The %label field is required.', array('%label' => $element['#title'])));
-  }
-
-  $day = empty($element['#value']['day']) ? 1 : $element['#value']['day'];
-  $month = empty($element['#value']['month']) ? 1 : $element['#value']['month'];
-  $year = empty($element['#value']['year']) ? NULL : $element['#value']['year'];
-
-  $months = partial_date_months($year);
-  if (!isset($months[$month - 1])) {
-    form_error($element, t('The specified month is invalid.'));
-  }
-  elseif ($day < 1 || $day > $months[$month - 1]) {
-    form_error($element, t('The specified month is invalid.'));
-  }
-
-  if (!empty($element['#value']['hour'])) {
-    if (!is_numeric($element['#value']['hour']) || $element['#value']['hour'] < 0 || $element['#value']['hour'] > 23) {
-      form_error($element, t('The specified time is invalid. Hours must be a number between 0 and 23'));
+function partial_date_year_designation_decorator($year, $designation = 'ce') {
+  static $designation_suffixes;
+  if (empty($designation_suffixes)) {
+    $designation_suffixes = array(
+      'BC' => 'BC',
+      'AD' => 'AD',
+      'BCE' => 'BCE',
+      'CE' => 'CE',
+    );
+    foreach ($designation_suffixes as $key => $designation_suffix) {
+      $designation_suffixes[$key] = t($designation_suffix, array(), array('context' => 'datetime'));
     }
   }
 
-  if (!empty($element['#value']['minute'])) {
-    if (!is_numeric($element['#value']['minute']) || $element['#value']['minute'] < 0 || $element['#value']['minute'] > 59) {
-      form_error($element, t('The specified time is invalid. Minutes must be a number between 0 and 59'));
-    }
+  if (empty($year) || !is_numeric($year)) {
+    return '';
   }
+  switch ($designation) {
+    case 'ce':
+      return $year > 0 ? $designation_suffixes['CE'] : $designation_suffixes['BCE'];
 
-  if (!empty($element['#value']['second'])) {
-    if (!is_numeric($element['#value']['second']) || $element['#value']['second'] < 0 || $element['#value']['second'] > 59) {
-      form_error($element, t('The specified time is invalid. Seconds must be a number between 0 and 59'));
-    }
-  }
+    case 'bce':
+      return $year > 0 ? '' : $designation_suffixes['BCE'];
 
-  // We could validate a time according to the daylight savings rules....
-  // But this is probably overkill.
-}
+    case 'ad':
+      return $year > 0 ? $designation_suffixes['AD'] : $designation_suffixes['BC'];
 
-function partial_date_components($has_date, $has_time, $has_to_date = FALSE, $has_year_estimates = FALSE) {
-  static $date_components = NULL, $date_components_to = NULL;
-  static $time_components = NULL, $time_components_to = NULL;
-  if (!$date_components) {
-    $date_components = array();
-    $date_components_to = array();
-    $time_components = array();
-    $time_components_to = array();
-    foreach (date_granularity_names() as $key => $title) {
-      if (in_array($key, array('year', 'month', 'day'))) {
-        $date_components[$key] = $title;
-        $date_components_to[$key . '_to'] = $title;
-      }
-      else {
-        $time_components[$key] = $title;
-        $time_components_to[$key . '_to'] = $title;
-      }
-    }
-  }
-  $components = array();
-  if ($has_date) {
-    if ($has_year_estimates) {
-      $components['year_estimate'] = t('Approximate Year');
-    }
-    $components += $date_components;
-  }
-  if ($has_time) {
-    $components += $time_components;
-  }
-  if ($has_to_date) {
-    if ($has_year_estimates) {
-      $components['year_estimate_to'] = t('Approximate Year');
-    }
-    if ($has_date) {
-      $components += $date_components_to;
-    }
-    if ($has_time) {
-      $components += $time_components_to;
-    }
+    case 'bc':
+      return $year > 0 ? '' : $designation_suffixes['BC'];
+
+    case 'sign':
+    default:
+      return '';
   }
-  return $components;
 }
 
 /**
- * Roll out a single date element.
+ * Returns a translated ordinal suffix for a given day of the month.
  */
-function partial_date_element_process($element) {
-  $is_range = strpos($element['#type'], 'range');
-  $has_date = strpos($element['#type'], 'date');
-  $has_time = strpos($element['#type'], 'time');
-
-  // Provides an esitmate support. The from date uses the starting ranges
-  // value and the from date uses the ending ranges.
-  $start_year_estimates = NULL;
-  $end_year_estimates = NULL;
-  if (!empty($element['#year_estimates'])) {
-    foreach (explode("\n", $element['#year_estimates']) as $line) {
-      list($start, $end, $label) = explode('|', $line . '||');
-      if ($start && $end && $label) {
-        $start_year_estimates[$start] = $label;
-        $end_year_estimates[$end] = $label;
-      }
+function partial_date_day_ordinal_suffix($day) {
+  if (empty($day)) {
+    return '';
+  }
+  static $suffixes;
+  if (empty($suffixes)) {
+    $suffixes = array(
+      'st' => 'st',
+      'nd' => 'nd',
+      'rd' => 'rd',
+      'th' => 'th',
+    );
+    foreach ($suffixes as $key => $suffix) {
+      $suffixes[$key] = t($suffix, array(), array('context' => 'datetime'));
     }
   }
 
-  $components = partial_date_components($has_date, $has_time, $is_range, $start_year_estimates);
+  switch (($day = abs($day)) % 100) {
+    case 11:
+    case 12:
+    case 13:
+      return $suffixes['th'];
 
-  if (partial_date_field_is_empty($element['#value'], array('type' => $element['#type']))) {
-    $element['#value'] = array();
-    if ($has_time) {
-      $element['#value']['timezone'] = variable_get('date_default_timezone', date_default_timezone_get());
-    }
-    foreach ($components as $key => $title) {
-      $element['#value'][$key] = '';
-    }
-    foreach (array('txt_short', 'txt_long') as $key) {
-      $element['#value'][$key] = '';
-    }
-  }
+    default:
+      switch ($day % 10) {
+        case 1:
+          return $suffixes['st'];
 
-  $element['#tree'] = TRUE;
+        case 2:
+          return $suffixes['nd'];
 
-  $unknown = array('' => t('N/A'));
-  foreach ($components as $type => $title) {
-    if ($is_range && empty($element['_separator'])) {
-      if (in_array($type, array('year_to', 'year_estimate_to', 'hour_to'))) {
-        $element['_separator'] = array(
-          '#type' => 'markup',
-          '#markup' => '<div class="partial-date-separator" style="float: left; margin-right: 0.5em;">' . t('to', array(), array('context' => 'datetime')) . '</div>',
-        );
-      }
-    }
+        case 3:
+          return $suffixes['rd'];
 
-    if ($type == 'year' || $type == 'year_to') {
-      $element[$type] = array(
-        '#type' => 'textfield',
-        '#title' => $title,
-        '#description' => $title,
-        '#title_display' => 'invisible',
-        '#value' => $element['#value'][$type],
-        '#attributes' => $element['#attributes'],
-        '#required' => TRUE,
-      );
-      $element[$type]['#attributes']['size'] = 5;
-    }
-    elseif ($type == 'year_estimate' || $type == 'year_estimate_to') {
-      $element[$type] = array(
-        '#type' => 'select',
-        '#title' => $title,
-        '#description' => $title,
-        '#title_display' => 'invisible',
-        '#value' => $element['#value'][$type],
-        '#attributes' => $element['#attributes'],
-        '#options' => $unknown + ($type == 'year_estimate' ? $start_year_estimates : $end_year_estimates),
-      );
-    }
-    else {
-      $element[$type] = array(
-        '#type' => 'select',
-        '#title' => $title,
-        '#description' => $title,
-        '#title_display' => 'invisible',
-        '#value' => empty($element['#value'][$type]) ? '' : $element['#value'][$type],
-        '#attributes' => $element['#attributes'],
-        '#options' => partial_date_options($type, $unknown),
-      );
-    }
-    $element[$type]['#prefix'] = '<div class="partial-date-' . $type . '" style="float: left; margin-right: 0.5em;">';
-    $element[$type]['#suffix'] = '</div>';
+        default:
+          return $suffixes['th'];
+      }
   }
+}
 
-  if ($has_time) {
-    if (!empty($element['#timezone'])) {
-      $element['timezone'] = array(
-        '#type' => 'select',
-        '#title' => t('Timezone', array(), array('context' => 'datetime')),
-        '#description' => t('Timezone', array(), array('context' => 'datetime')),
-        '#title_display' => 'invisible',
-        '#value' => $element['#value']['timezone'],
-        '#attributes' => $element['#attributes'],
-        '#options' => partial_date_options('timezone', $unknown),
-        '#prefix' => '<div class="partial-date-timezone" style="float: left; margin-right: 0.5em;">',
-        '#suffix' => '</div>',
-      );
-    }
-    else {
-      $element['timezone'] = array(
-        '#type' => 'value',
-        '#value' => $element['#value']['timezone'],
-      );
-    }
+/**
+ * Returns true, if given $year is a leap year.
+ *
+ * @param  integer $year
+ * @return boolean true, if year is leap year
+ */
+function partial_date_is_leap_year($year) {
+  if (empty($year)) {
+    return FALSE;
   }
 
-  $element['_remove'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Remove'),
-    '#value' => 0,
-    '#prefix' => '<div class="partial-date-' . $type . '" style="float: right; margin-left: 0.5em;">',
-    '#suffix' => '</div>',
-  );
+   if ($year < 1582) {
+    // pre Gregorio XIII - 1582
+    return $year % 4 == 0;
+   }
+   else {
+     // post Gregorio XIII - 1582
+     return (($year % 4 == 0) && ($year % 100 != 0)) || ($year % 400 == 0);
+   }
+}
 
-  foreach (array('txt_short', 'txt_long') as $key) {
-    if (!empty($element['#' . $key])) {
-      $element[$key] = array(
-        '#type' => 'textfield',
-        '#title' => $title,
-        '#description' => $key == 'txt_short' ? t('Short description of date') : t('Longer description of date'),
-        '#title_display' => 'invisible',
-        '#value' => $element['#value'][$key],
-        '#attributes' => $element['#attributes'],
-        '#required' => TRUE,
-        '#prefix' => '<div class="partial-date-' . $type . '" style="float: left; clear: left;">',
-        '#suffix' => '</div>',
-      );
+/**
+ * Generates a numeric date string.
+ */
+function partial_date_float(array $c) {
+  foreach (partial_date_components(array('timezone')) as $key => $label) {
+    if (!isset($c[$key]) || !strlen($c[$key])) {
+      $c[$key] = 0;
     }
-    else {
-      $element[$key] = array(
-        '#type' => 'value',
-        '#value' => '',
-      );
+    elseif ($key != 'year' && $key != 'month') {
+      // Increment hours, minutes and seconds to allow the module to distintish
+      // between 0 meaning unset and 1 to 24/60 being the actual values.
+      // Day is incremented to provide a buffer to add / remove the timezone.
+      $c[$key] = $c[$key] + 1;
     }
   }
 
-  // Apply the instance granularity settings.
-  foreach (date_granularity_names() as $key => $title) {
-    if (empty($element['#granularity'][$key])) {
-      if (isset($element[$key])) {
-        $element[$key]['#type'] = 'value';
-        $element[$key]['#value'] = '';
-      }
-      if (isset($element[$key . '_to'])) {
-        $element[$key . '_to']['#type'] = 'value';
-        $element[$key . '_to']['#value'] = '';
-      }
-    }
-  }
-
-
-  return $element;
-}
-
-function partial_date_options($type, $options = array()) {
-  $type = str_replace('_to', '', $type);
-  switch ($type) {
-    case 'second':
-    case 'minute':
-      return $options + drupal_map_assoc(range(0, 59));
-
-    case 'hour':
-      return $options + drupal_map_assoc(range(0, 23));
-
-    case 'day':
-      return $options + drupal_map_assoc(range(1, 31));
-
-    case 'month':
-      return $options + drupal_map_assoc(range(1, 12), 'map_month');
-
-    case 'timezone':
-      return $options + date_timezone_names(TRUE);
-  }
+  $date = abs($c['year'])
+      . sprintf('%02s', $c['month'])  // 0 or 1-12
+      . sprintf('%02s', $c['day']) // 0 or 2-32
+      . sprintf('%02s', $c['hour']) // 0 or 1-24
+      . sprintf('%02s', $c['minute']) // 0 or 1-60
+      . sprintf('%02s', $c['second']); // 0 or 1-60
+  return ((float) ltrim($date, '0')) * ($c['year'] >= 0 ? 1.0 : -1.0);
 }
 
-
 /**
- * Copied from Zend_Date.
+ * Creates a timestamp based on the available components.
  *
- * @param  integer  $hour
- * @param  integer  $minute
- * @param  integer  $second
- * @param  integer  $month
- * @param  integer  $day
- * @param  integer  $year
- * @param  boolean  $gmt     OPTIONAL true = other arguments are for UTC time, false = arguments are for local time/date
- * @return  integer|float  timestamp (number of seconds elapsed relative to 1970/01/01 00:00:00 GMT/UTC)
+ * Copied from Zend_Date. Significantly modified.
+ *
+ * @param array $components
+ *   An array of all the defined date components including timezone.
+ *
+ * @return  integer|float
+ *   An approx. timestamp (number of seconds elapsed relative to 1970/01/01 00:00:00 GMT/UTC)
  */
-function partial_date_mktime($hour, $minute, $second, $month, $day, $year, $timezone, $gmt = true) {
-  // complete date but in 32bit timestamp - use PHP internal
+function partial_date_mktime(array $components) {
+  $components = array_intersect_key($components, partial_date_components());
+  extract($components, EXTR_SKIP);
+
   if ((1901 < $year) and ($year < 2038)) {
     $oldzone = @date_default_timezone_get();
-    // Timezone also includes DST settings, therefor substracting the GMT offset is not enough
-    // We have to set the correct timezone to get the right value
-    if ($timezone && ($timezone != $oldzone) && ($gmt === false)) {
+    if ($timezone && ($timezone != $oldzone)) {
       date_default_timezone_set($timezone);
     }
-    $result = ($gmt) ? @gmmktime($hour, $minute, $second, $month, $day, $year)
-                     : @mktime($hour, $minute, $second, $month, $day, $year);
-    date_default_timezone_set($oldzone);
-    return $result;
+    $result = @mktime($hour, $minute, $second, $month, $day, $year);
+    if ($timezone && ($timezone != $oldzone)) {
+      date_default_timezone_set($oldzone);
+    }
+    if ($result !== FALSE) {
+      return $result;
+    }
   }
 
         // Get approx. offset
@@ -1122,7 +882,7 @@ function partial_date_mktime($hour, $minute, $second, $month, $day, $year, $time
   $day   = intval($day);
   $month = intval($month);
   $year  = intval($year);
-  $_monthTable = partial_date_months();
+  $_monthTable = partial_date_month_matrix();
 
   if ($month > 12) {
     $overlap = floor($month / 12);
@@ -1137,11 +897,11 @@ function partial_date_mktime($hour, $minute, $second, $month, $day, $year, $time
 
   $date = 0;
   // correct months > 12 and months < 1
-  if ($year < 0 || $year > 3999) {
+  if ($year < -99999 || $year > 99999) {
     // Calculate the average number of seconds in a year.
-    $seconds_in_year = ($year - 1970) * PARTIAL_DATE_SEC_PER_YEAR;
+    $seconds_in_year = ($year - 1970) * PD2_SEC_PER_YEAR;
 
-    $leapyear = partial_date_year_is_leap_year($year);
+    $leapyear = partial_date_is_leap_year($year);
     for ($mcount = 0; $mcount < ($month - 1); $mcount++) {
       $date += $_monthTable[$mcount];
       if (($leapyear === true) and ($mcount == 1)) {
@@ -1156,7 +916,7 @@ function partial_date_mktime($hour, $minute, $second, $month, $day, $year, $time
     // go through leapyears
     // add months from latest given year
     for ($count = 1970; $count <= $year; $count++) {
-      $leapyear = partial_date_year_is_leap_year($count);
+      $leapyear = partial_date_is_leap_year($count);
       if ($count < $year) {
         $date += 365;
         if ($leapyear === true) {
@@ -1181,7 +941,7 @@ function partial_date_mktime($hour, $minute, $second, $month, $day, $year, $time
     // go through leapyears
     // add months from latest given year
     for ($count = 1969; $count >= $year; $count--) {
-      $leapyear = partial_date_year_is_leap_year($count);
+      $leapyear = partial_date_is_leap_year($count);
       if ($count > $year) {
         $date += 365;
         if ($leapyear === true) {
@@ -1212,39 +972,81 @@ function partial_date_mktime($hour, $minute, $second, $month, $day, $year, $time
   return $date;
 }
 
+
 /**
- * Returns true, if given $year is a leap year.
- *
- * @param  integer  $year
- * @return boolean  true, if year is leap year
+ * Function used by uasort to sort structured arrays by weight.
  */
-function partial_date_year_is_leap_year($year) {
-  // all leapyears can be divided through 4
-  if (($year % 4) != 0) {
-      return false;
+function partial_date_sort($a, $b) {
+  $a_weight = (is_array($a) && isset($a['weight'])) ? $a['weight'] : 0;
+  $b_weight = (is_array($b) && isset($b['weight'])) ? $b['weight'] : 0;
+  if ($a_weight == $b_weight) {
+    return 0;
   }
+  return ($a_weight < $b_weight) ? -1 : 1;
+}
 
-  // all leapyears can be divided through 400
-  if ($year % 400 == 0) {
-      return true;
-  } else if (($year > 1582) and ($year % 100 == 0)) {
-      return false;
+/**
+ * Returns any configured separators for two components.
+ */
+function _partial_date_component_separator($a, $b, $separators = array()) {
+  if ($a === FALSE) {
+    return;
+  }
+  $a_type = _partial_date_component_type($a);
+  $b_type = _partial_date_component_type($b);
+  if (!$a_type || !$b_type) {
+    $key = 'other';
+  }
+  elseif ($a_type == $b_type) {
+    $key = $a_type;
   }
+  else {
+    $key = 'datetime';
+  }
+  return isset($separators[$key]) ? $separators[$key] : FALSE;
 
-  return true;
 }
+/**
+ * Helper function to determine the component type for inserting the component
+ * separator.
+ *
+ * @return mixed
+ *   One of date, time or FALSE.
+ */
+function _partial_date_component_type($key) {
+  switch ($key) {
+    case 'year':
+    case 'month':
+    case 'day':
+      return 'date';
 
-function partial_date_months($year = NULL) {
-  if ($year && partial_date_year_is_leap_year($year)) {
-    return array(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
+    case 'hour':
+    case 'minute':
+    case 'second':
+      return 'time';
+
+    case 'timezone':
+    default:
+      return FALSE;
   }
-  return array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
 }
 
 
-function partial_date_views_api() {
-  return array(
-    'api' => 3,
-    'path' => drupal_get_path('module', 'partial_date') . '/includes',
-  );
+function _partial_date_render_component($key, $item, $field, $format) {
+  switch ($field) {
+    case 'none':
+      return '';
+
+    case 'date_only':
+      return isset($item[$key]) ? $item[$key] : '';
+
+    case 'estimate_label':
+    case 'estimate_range': // Start (single or from dates) or End (to dates) of estimate range
+    case 'estimate_component': // Date component with fallback to estimate component
+    case 'date_or':
+
+    default:
+      return $field;
+  }
 }
+
diff --git a/partial_date.pages.inc b/partial_date.pages.inc
new file mode 100644
index 0000000..60085c2
--- /dev/null
+++ b/partial_date.pages.inc
@@ -0,0 +1,9 @@
+<?php
+
+/**
+ *@file
+ * Page and form callbacks for handling the date format.
+ * function partial_date_type_format_elements($settings, $field = NULL, $instance = NULL, $view_mode = NULL)
+ *   - moved to PartialDateFormatEditForm::form
+ */
+
diff --git a/partial_date.routing.yml b/partial_date.routing.yml
new file mode 100644
index 0000000..fdd9b00
--- /dev/null
+++ b/partial_date.routing.yml
@@ -0,0 +1,41 @@
+## YAML Template.
+entity.partial_date_format.list:
+    path: 'admin/config/regional/partial-date-formats'
+    defaults:
+        _entity_list: 'partial_date_format'
+        _title: 'Partial date formats'
+    requirements:
+        _permission: 'administer site configuration'
+
+entity.partial_date_format.add_form:
+    path: 'admin/config/regional/partial-date-format/add'
+    defaults:
+        _entity_form: 'partial_date_format.add'
+        _title: 'Add partial date format'
+    requirements:
+        _permission: 'administer site configuration'
+
+entity.partial_date_format.edit_form:
+    path: 'admin/config/regional/partial-date-format/{partial_date_format}'
+    defaults:
+        _entity_form: 'partial_date_format.edit'
+        _title: 'Edit partial date format'
+    requirements:
+        _permission: 'administer site configuration'
+
+entity.partial_date_format.delete_form:
+    path: 'admin/config/regional/partial-date-format/{partial_date_format}/delete'
+    defaults:
+        _entity_form: 'partial_date_format.delete'
+        _title: 'Delete partial date format'
+    requirements:
+        _permission: 'administer site configuration'
+
+partial_date_format.settings:
+    path: 'admin/config/regional/partial-date-format/settings'
+    defaults:
+        _form: '\Drupal\partial_date\Form\PartialDateSettingsForm'
+        _title: 'Manage partial date settings'
+    requirements:
+        _permission: 'administer site configuration'
+
diff --git a/partial_date.theme.inc b/partial_date.theme.inc
new file mode 100644
index 0000000..d07aba9
--- /dev/null
+++ b/partial_date.theme.inc
@@ -0,0 +1,119 @@
+<?php
+
+/**
+ * @file
+ * The theme callbacks for date formatters and element.
+ */
+
+/**
+ * Workaround for theming the range elements inline.
+ */
+function theme_partial_date_inline_form_element($variables) {
+  $element = &$variables['element'];
+  // This is also used in the installer, pre-database setup.
+  $t = 't';
+
+  // This function is invoked as theme wrapper, but the rendered form element
+  // may not necessarily have been processed by form_builder().
+  $element += array(
+    '#title_display' => 'before',
+  );
+
+  // Add element #id for #type 'item'.
+  if (isset($element['#markup']) && !empty($element['#id'])) {
+    $attributes['id'] = $element['#id'];
+  }
+  // Add element's #type and #name as class to aid with JS/CSS selectors.
+  $attributes['class'][] = 'form-item';
+  $attributes['class'][] = 'clearfix';
+  if (!empty($element['#type'])) {
+    $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
+  }
+  if (!empty($element['#name'])) {
+    $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
+  }
+  // Add a class for disabled elements to facilitate cross-browser styling.
+  if (!empty($element['#attributes']['disabled'])) {
+    $attributes['class'][] = 'form-disabled';
+  }
+  // @FIXME
+// Could not extract the default value because it is either indeterminate, or
+// not scalar. You'll need to provide a default value in
+// config/install/partial_date.settings.yml and config/schema/partial_date.schema.yml.
+if ($css = \Drupal::config('partial_date.settings')->get('partial_date_component_field_inline_range_styles')) {
+    $attributes['style'] = $css;
+  }
+  $output = '<div' . drupal_attributes($attributes) . '>' . "\n";
+
+  // If #title is not set, we don't display any label or required marker.
+  if (!isset($element['#title'])) {
+    $element['#title_display'] = 'none';
+  }
+  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ' : '';
+  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>' : '';
+
+  switch ($element['#title_display']) {
+    case 'before':
+    case 'invisible':
+      // @FIXME
+// theme() has been renamed to _theme() and should NEVER be called directly.
+// Calling _theme() directly can alter the expected output and potentially
+// introduce security issues (see https://www.drupal.org/node/2195739). You
+// should use renderable arrays instead.
+// 
+// 
+// @see https://www.drupal.org/node/2195739
+// $output .= ' ' . theme('form_element_label', $variables);
+
+      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
+      break;
+
+    case 'after':
+      $output .= ' ' . $prefix . $element['#children'] . $suffix;
+      // @FIXME
+// theme() has been renamed to _theme() and should NEVER be called directly.
+// Calling _theme() directly can alter the expected output and potentially
+// introduce security issues (see https://www.drupal.org/node/2195739). You
+// should use renderable arrays instead.
+// 
+// 
+// @see https://www.drupal.org/node/2195739
+// $output .= ' ' . theme('form_element_label', $variables) . "\n";
+
+      break;
+
+    case 'none':
+    case 'attribute':
+      // Output no label and no required marker, only the children.
+      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
+      break;
+  }
+
+  if (!empty($element['#description'])) {
+    $output .= '<div class="description">' . $element['#description'] . "</div>\n";
+  }
+
+  $output .= "</div>\n";
+
+  return $output;
+}
+
+function theme_partial_date_range_inline_element($variables) {
+  $element = &$variables['element'];
+  $output = '<div class="clearfix partial-date-inline-range">';
+  if (isset($element['from']) && isset($element['to'])) {
+    $output .= '<div class="clearfix">';
+    $output .= \Drupal::service("renderer")->render($element['from']);
+    $output .= \Drupal::service("renderer")->render($element['_separator']);
+    $output .= \Drupal::service("renderer")->render($element['to']);
+    $output .= '</div>';
+    if (!empty($element['#component_help'])) {
+      $output .= '<div class="description">' . $element['#component_help'] . '</div>';
+    }
+
+
+  }
+  $output .= drupal_render_children($element);
+  $output .= '</div>';
+  return $output;
+}
diff --git a/phpunit.conf.xml b/phpunit.conf.xml
new file mode 100644
index 0000000..8e30e5a
--- /dev/null
+++ b/phpunit.conf.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0"?>
+<!--
+To change this license header, choose License Headers in Project Properties.
+To change this template file, choose Tools | Templates
+and open the template in the editor.
+-->
+
+<!-- see http://www.phpunit.de/wiki/Documentation -->
+<!--phpunit bootstrap="/path/to/bootstrap.php"
+         colors="false"
+         convertErrorsToExceptions="true"
+         convertNoticesToExceptions="true"
+         convertWarningsToExceptions="true"
+         stopOnFailure="true">
+</phpunit-->
+
+<phpunit colors="false"> 
+    <testsuites>
+      <testsuite name="My Test Suite">
+        <directory suffix="Test.php">tests/src</directory>
+        <directory suffix="Test.php">tests/src/Unit</directory>
+        <exclude>/path/to/exclude</exclude>
+      </testsuite>
+    </testsuites>
+</phpunit>
diff --git a/src/Controller/PartialDateFormatListBuilder.php b/src/Controller/PartialDateFormatListBuilder.php
new file mode 100644
index 0000000..8b43a84
--- /dev/null
+++ b/src/Controller/PartialDateFormatListBuilder.php
@@ -0,0 +1,35 @@
+<?php
+
+
+namespace Drupal\partial_date\Controller;
+
+use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
+use Drupal\Core\Entity\EntityInterface;
+
+/**
+ * Description of PartialDateFormatListBuilder
+ *
+ * @author CosminFr
+ */
+class PartialDateFormatListBuilder extends ConfigEntityListBuilder {
+  
+  /**
+   * {@inheritdoc}
+   */
+  public function buildHeader() {
+    $header['label'] = $this->t('Partial date format');
+    $header['id'] = $this->t('Machine name');
+    //TODO add more...
+    return $header + parent::buildHeader();
+  }
+  
+  /**
+   * {@inheritdoc}
+   */
+  public function buildRow(EntityInterface $entity) {
+    $row['label'] = $entity->label();
+    $row['id'] = $entity->id();
+    //TODO add more...
+    return $row + parent::buildRow($entity);
+  }
+}
diff --git a/src/Element/PartialDateElement.php b/src/Element/PartialDateElement.php
new file mode 100644
index 0000000..8e6b955
--- /dev/null
+++ b/src/Element/PartialDateElement.php
@@ -0,0 +1,140 @@
+<?php
+
+namespace Drupal\partial_date\Element;
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Render\Element\FormElement;
+
+/**
+ * Provides a form element for partial date widget.
+ *
+ * @FormElement("partial_datetime_element")
+ * @author CosminFr
+ */
+class PartialDateElement extends FormElement {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getInfo() {
+    return [
+      '#input' => TRUE,
+      '#process' => [[get_class($this), 'process']],
+      '#element_validate' => [[get_class($this), 'validate']], //array('partial_date_element_validate'),
+//      '#theme' => 'partial_date_element',
+      '#theme_wrappers' => array('form_element'),
+    ];
+  }
+  
+  /**
+   * Process callback.
+   */
+  public static function process(&$element, FormStateInterface $form_state, &$complete_form) {
+    $granularity = $element['#granularity'];
+    $estimates = $element['#estimates'];
+    $options = $element['#estimate_options'];
+    $increments = empty($element['#increments']) ? array() : $element['#increments'];
+    $increments += array(
+      'second' => 1,
+      'minute' => 1,
+    );
+    $element['#tree'] = TRUE;
+    $blank_option = array('' => t('N/A'));
+    foreach (partial_date_components() as $key => $label) {
+      if (!empty($estimates[$key]) && !empty($options[$key])) {
+        $estimate_label = t('@component estimate', array('@component' => $label));
+        $element[$key . '_estimate'] = array(
+          '#type' => 'select',
+          '#title' => $estimate_label,
+          '#description' => $estimate_label,
+          '#title_display' => 'invisible',
+          '#value' => empty($element['#value'][$key . '_estimate']) ? '' : $element['#value'][$key . '_estimate'],
+          '#attributes' => $element['#attributes'],
+          '#options' => $blank_option + $options[$key],
+        );
+      }
+      if (!empty($granularity[$key])) {
+        if ($key == 'year') {
+          $element[$key] = array(
+            '#type' => 'textfield',
+            '#title' => $label,
+            '#description' => $label,
+            '#title_display' => 'invisible',
+            '#value' => empty($element['#value'][$key]) ? '' : $element['#value'][$key],
+            '#attributes' => $element['#attributes'],
+            '#required' => TRUE,
+          );
+          $element[$key]['#attributes']['size'] = 5;
+        }
+        else {
+          $inc = empty($increments[$key]) ? 1 : $increments[$key];
+          $element[$key] = array(
+            '#type' => 'select',
+            '#title' => $label,
+            '#description' => $label,
+            '#title_display' => 'invisible',
+            '#value' => isset($element['#value'][$key]) && strlen($element['#value'][$key]) ? $element['#value'][$key] : '',
+            '#attributes' => $element['#attributes'],
+            '#options' => partial_date_granularity_field_options($key, $blank_option, $inc),
+          );
+        }
+      }
+    }
+
+    $css = $element['#component_styles'];
+    foreach (\Drupal\Core\Render\Element::children($element) as $child) {
+      if ($element[$child]['#type'] != 'value') {
+        $element[$child]['#prefix'] = '<div class="partial-date-' . (str_replace('_', '-', $child)) . '" style="' . $css . '">';
+        $element[$child]['#suffix'] = '</div>';
+      }
+    }
+    return $element;
+  }
+  
+  /**
+   * #element_validate callback.
+   * {@inheritdoc}
+   */
+  public static function validate(&$element, FormStateInterface $form_state, &$complete_form) {
+    if (!empty($element['#required']) && partial_date_field_is_empty($element['#value'], array('type' => $element['#type']))) {
+      $form_state->setError($element, t('The %label field is required.', array('%label' => $element['#title'])));
+    }
+
+    $day = empty($element['#value']['day']) ? 1 : $element['#value']['day'];
+    $month = empty($element['#value']['month']) ? 1 : $element['#value']['month'];
+    $year = empty($element['#value']['year']) ? NULL : $element['#value']['year'];
+
+    $months = partial_date_month_matrix($year);
+    if (!isset($months[$month - 1])) {
+      $form_state->setError($element, t('The specified month is invalid.'));
+    }
+    elseif ($day < 1 || $day > $months[$month - 1]) {
+      $form_state->setError($element, t('The specified month is invalid.'));
+    }
+
+    if (!empty($element['#value']['hour'])) {
+      if (!is_numeric($element['#value']['hour']) || $element['#value']['hour'] < 0 || $element['#value']['hour'] > 23) {
+        $form_state->setError($element, t('The specified time is invalid. Hours must be a number between 0 and 23'));
+      }
+    }
+
+    if (!empty($element['#value']['minute'])) {
+      if (!is_numeric($element['#value']['minute']) || $element['#value']['minute'] < 0 || $element['#value']['minute'] > 59) {
+        $form_state->setError($element, t('The specified time is invalid. Minutes must be a number between 0 and 59'));
+      }
+    }
+
+    if (!empty($element['#value']['second'])) {
+      if (!is_numeric($element['#value']['second']) || $element['#value']['second'] < 0 || $element['#value']['second'] > 59) {
+        $form_state->setError($element, t('The specified time is invalid. Seconds must be a number between 0 and 59'));
+      }
+    }
+
+//    // Testing what removing the additional elements does...
+//    // Getting strange submission values.
+//    foreach (\Drupal\Core\Render\Element::children($element) as $child) {
+//      unset($element[$child]);
+//    }
+  }
+
+}
diff --git a/src/Element/PartialDateInlineElement.php b/src/Element/PartialDateInlineElement.php
new file mode 100644
index 0000000..0d6e808
--- /dev/null
+++ b/src/Element/PartialDateInlineElement.php
@@ -0,0 +1,29 @@
+<?php
+
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+
+namespace Drupal\partial_date\Element;
+
+/**
+ * Description of PartialDateInlineElement
+ *
+ * @FormElement("partial_datetime_inline_element")
+ * @author CosminFr
+ */
+class PartialDateInlineElement extends PartialDateElement {
+ 
+  /**
+   * {@inheritdoc}
+   */
+  public function getInfo() {
+    return [
+      '#theme' => 'partial_date_range_inline_element',
+      '#theme_wrappers' => array('partial_date_inline_form_element'),
+    ] + parent::getInfo();
+  }
+  
+}
diff --git a/src/Entity/PartialDateFormat.php b/src/Entity/PartialDateFormat.php
new file mode 100644
index 0000000..5729a16
--- /dev/null
+++ b/src/Entity/PartialDateFormat.php
@@ -0,0 +1,193 @@
+<?php
+
+namespace Drupal\partial_date\Entity;
+
+use Drupal\Core\Config\Entity\ConfigEntityBase;
+use Drupal\partial_date\Entity\PartialDateFormatInterface;
+
+/**
+ * Defines the FormatType config entity.
+ * 
+ * @ConfigEntityType(
+ *   id = "partial_date_format",
+ *   label = @Translation("Partial date format"),
+ *   handlers = {
+ *     "list_builder" = "Drupal\partial_date\Controller\PartialDateFormatListBuilder",
+ *     "form" = {
+ *        "add" = "Drupal\partial_date\Form\PartialDateFormatEditForm",
+ *        "edit" = "Drupal\partial_date\Form\PartialDateFormatEditForm",
+ *        "delete" = "Drupal\partial_date\Form\PartialDateFormatDeleteForm",
+ *     }
+ *   },
+ *   config_prefix = "format",
+ *   admin_permission = "administer site configuration",
+ *   entity_keys = {
+ *     "id" = "id",
+ *     "label" = "label",
+ *   },
+ *   links = {
+ *     "edit-form" = "/admin/config/regional/date-time/partial-date-format/{format}",
+ *     "delete-form" = "/admin/config/regional/date-time/partial-date-format/{format}/delete",
+ *   },
+ * )
+ *
+ * @author CosminFr
+ */
+class PartialDateFormat extends ConfigEntityBase implements PartialDateFormatInterface {
+  /**
+   * @var string
+   */
+  public  $id;
+  
+  /**
+   * @var string
+   */
+  public $meridiem;
+  
+  /**
+   * @var string
+   * This controls how year designation is handled: 1BC = 1BCE = -1 and 1AD = 1CE = 1.
+   */
+  public $year_designation;
+  
+  /**
+   * @var array
+   */
+  public $display = array(
+    'year' => 'estimate_label',
+    'month' => 'estimate_label',
+    'day' => 'estimate_label',
+    'hour' => 'estimate_label',
+    'minute' => 'estimate_label',
+    'second' => 'none',
+    'timezone' => 'none',
+  );
+  
+  /**
+   * @var array
+   */
+  public $components = array(
+    'year' => array('format' => 'y-ce', 'empty' => '', 'weight' => 0), 
+    'month' => array('format' => 'm', 'empty' => '', 'weight' => 1),
+    'day' => array('format' => 'j', 'empty' => '', 'weight' => 2),
+    'hour' => array('format' => 'H', 'empty' => '', 'weight' => 3),
+    'minute' => array('format' => 'i', 'empty' => '', 'weight' => 4),
+    'second' => array('format' => 's', 'empty' => '', 'weight' => 5),
+    'timezone' => array('format' => 'T', 'empty' => '', 'weight' => 6),
+    'approx' => array('value' => '', 'weight'=> -1),
+    'c1' => array('value' => '', 'weight'=> 7),
+    'c2' => array('value' => '', 'weight'=> 8),
+    'c3' => array('value' => '', 'weight'=> 9),
+  );
+
+  /**
+   * @var array
+   * An array with specific separators.
+   */
+  public $separator = array(
+    'date' => '/',
+    'time' => ':',
+    'datetime' => ' ',
+    'range' => ' - ',
+    'other' => ' ',
+  );
+  
+  
+  
+  /**
+   * Helper functions. Should be moved to configuration (yml files), altough not really user configurable.
+   */
+
+  /**
+   * Define the possible options for meridiem setting
+   * @return "options" array
+   */
+  public function partial_date_meridiem_options() {
+    return array(
+      'a' => t('Lowercase (am or pm)'),
+      'A' => t('Uppercase (AM or PM)')
+    );
+  }
+
+  /**
+   * Returns a translated option list of supported year designations.
+   */
+  public function partial_date_year_designation_options() {
+    return array(
+      'sign' => t('Negative sign (-)', array(), array('context' => 'datetime')),
+      'ad' => t('Anno Domini (BC/AD)', array(), array('context' => 'datetime')),
+      'bc' => t('Anno Domini (BC only)', array(), array('context' => 'datetime')),
+      'ce' => t('Common Era (BCE/CE)', array(), array('context' => 'datetime')),
+      'bce' => t('Common Era (BCE only)', array(), array('context' => 'datetime'))
+    );
+  }
+
+  public function partial_date_estimate_handling_options() {
+    return array(
+      'none' => t('Hide', array(), array('context' => 'datetime')),
+      'estimate_label' => t('Estimate label', array(), array('context' => 'datetime')),
+      'estimate_range' => t('Estimate range', array(), array('context' => 'datetime')),
+      'estimate_component' => t('Start (single or from dates) or End (to dates) of estimate range', array(), array('context' => 'datetime')),
+      'date_only' => t('Date component if set', array(), array('context' => 'datetime')),
+      'date_or' => t('Date component with fallback to estimate component', array(), array('context' => 'datetime')),
+    );
+  }
+
+  // TODO: Doco in main module
+  public function partial_date_component_format_options($component, array $additional_values = array()) {
+    static $options = NULL;
+    if (!isset($options)) {
+      $options = array(
+        'year' => array(
+          'Y' => t('A full numeric representation of a year. Eg: -125, 2003', array(), array('context' => 'datetime')),
+          'y' => t('A two digit representation of a year. Eg: -25, 03', array(), array('context' => 'datetime')),
+          'Y-ce' => t('A full numeric representation of a year with year designation. Eg: 125BC, 125BCE or -125', array(), array('context' => 'datetime')),
+          'y-ce' => t('A two digit representation of a year with year designation. Eg: 25BC, 25BCE or -25', array(), array('context' => 'datetime')),
+      //        'o' => t('ISO-8601 year number.', array(), array('context' => 'datetime')),
+        ),
+        'month' => array(
+          'F' => t('A full textual representation of a month, January through December.', array(), array('context' => 'datetime')),
+          'm' => t('Numeric representation of a month, with leading zeros, 01 through 12', array(), array('context' => 'datetime')),
+          'M' => t('A short textual representation of a month, three letters, Jan through Dec.', array(), array('context' => 'datetime')),
+          'n' => t('Numeric representation of a month, without leading zeros, 1 through 12', array(), array('context' => 'datetime')),
+        ),
+        'day' => array(
+          'd' => t('Day of the month, 2 digits with leading zeros, 01 through 31', array(), array('context' => 'datetime')),
+          'j' => t('Day of the month without leading zeros, 1 through 31.', array(), array('context' => 'datetime')),
+          'd-S' => t('Day of the month, 2 digits with leading zeros with English ordinal suffix.', array(), array('context' => 'datetime')),
+          'j-S' => t('Day of the month without leading zeros with English ordinal suffix.', array(), array('context' => 'datetime')),
+          // 'z' => t('The day of the year (starting from 0).', array(), array('context' => 'datetime')),
+          'l' => t('A full textual representation of the day of the week.', array(), array('context' => 'datetime')),
+          'D' => t('A textual representation of a day, three letters.', array(), array('context' => 'datetime')),
+          // 'N' => t('ISO-8601 numeric representation of the day of the week.', array(), array('context' => 'datetime')),
+          // 'S' => t('English ordinal suffix for the day of the month.', array(), array('context' => 'datetime')),
+          'w' => t('Numeric representation of the day of the week  0 (for Sunday) through 6 (for Saturday).', array(), array('context' => 'datetime')),
+        ),
+        'hour' => array(
+          'g' => t('12-hour format of an hour without leading zeros, 1 through 12.', array(), array('context' => 'datetime')),
+          'G' => t('24-hour format of an hour without leading zeros, 0 through 23.', array(), array('context' => 'datetime')),
+          'h' => t('12-hour format of an hour with leading zeros, 01 through 12.', array(), array('context' => 'datetime')),
+          'H' => t('24-hour format of an hour with leading zeros, 00 through 23.', array(), array('context' => 'datetime')),
+        ),
+        'minute' => array(
+          'i' => t('Minutes with leading zeros, 00 through 59.', array(), array('context' => 'datetime')),
+        ),
+        'second' => array(
+          's' => t('Seconds, with leading zeros, 00 through 59.', array(), array('context' => 'datetime')),
+          //'B' => t('Swatch Internet time.', array(), array('context' => 'datetime')),
+        ),
+        'timezone' => array(
+          'e' => t('Timezone identifier. Eg: UTC, GMT, Atlantic/Azores.', array(), array('context' => 'datetime')),
+          'T' => t('Timezone abbreviation. Eg: EST, MDT', array(), array('context' => 'datetime')),
+          // 'I' => t('Whether or not the date is in daylight saving time.', array(), array('context' => 'datetime')),
+          // 'O' => t('Difference to Greenwich time (GMT) in hours. Eg: +0200', array(), array('context' => 'datetime')),
+          // 'P' => t('Difference to Greenwich time (GMT) with colon between hours and minutes. Eg: +02:00', array(), array('context' => 'datetime')),
+          // 'Z' => t('Timezone offset in seconds, -43200 through 50400.', array(), array('context' => 'datetime')),
+        ),
+      );
+    }
+    return $additional_values + $options[$component];
+  }
+
+  
+}
diff --git a/src/Entity/PartialDateFormatInterface.php b/src/Entity/PartialDateFormatInterface.php
new file mode 100644
index 0000000..e3444b3
--- /dev/null
+++ b/src/Entity/PartialDateFormatInterface.php
@@ -0,0 +1,16 @@
+<?php
+
+namespace Drupal\partial_date\Entity;
+
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
+
+/**
+ * Provides an interface defining FormatType config entity
+ * 
+ * @author CosminFr
+ */
+interface PartialDateFormatInterface extends ConfigEntityInterface {
+  //Add get/set methods for your configuration properties here.
+
+  
+}
diff --git a/src/Form/PartialDateFormatDeleteForm.php b/src/Form/PartialDateFormatDeleteForm.php
new file mode 100644
index 0000000..19aa5cc
--- /dev/null
+++ b/src/Form/PartialDateFormatDeleteForm.php
@@ -0,0 +1,38 @@
+<?php
+
+namespace Drupal\partial_date\Form;
+
+use Drupal\Core\Entity\EntityConfirmFormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * A form confirmation for deleting a Partial date format type
+ *
+ * @author CosminFr
+ */
+class PartialDateFormatDeleteForm extends EntityConfirmFormBase {
+  //put your code here
+  
+  //this goes into title (less visible)
+  public function getQuestion() {
+    return $this->t('Delete partial date format %name ?',
+        array('%name' => $this->entity->label() ) );
+  }
+  
+  //this goes into the form (more visible)
+  public function getDescription() {
+    return $this->t('Are you sure you want to delete %name format?',
+        array('%name' => $this->entity->label() ) );
+  }
+
+  public function getCancelUrl() {
+    return new \Drupal\Core\Url('entity.partial_date_format.list');
+  }
+
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $this->entity->delete();
+    drupal_set_message($this->t('Partial date format %label has been deleted.',
+        array('%label' => $this->entity->label())));
+    $form_state->setRedirectUrl($this->getCancelUrl());
+  }
+}
diff --git a/src/Form/PartialDateFormatEditForm.php b/src/Form/PartialDateFormatEditForm.php
new file mode 100644
index 0000000..7594fee
--- /dev/null
+++ b/src/Form/PartialDateFormatEditForm.php
@@ -0,0 +1,260 @@
+<?php
+
+namespace Drupal\partial_date\Form;
+
+use Drupal\Core\Entity\EntityForm;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Entity\Query\QueryFactory;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\partial_date\Entity\PartialDateFormat;
+
+/**
+ * Description of FormatTypeEditForm
+ *
+ * @author CosminFr
+ */
+class PartialDateFormatEditForm extends EntityForm {
+  //put your code here
+  
+  /**
+   * @param \Drupal\Core\Entity\Query\QueryFactory $entity_query
+   *   The entity query.
+   */
+  public function __construct(QueryFactory $entity_query) {
+    $this->entityQuery = $entity_query;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('entity.query')
+    );
+  }
+
+  
+  /**
+   * {@inheritdoc}
+   */
+  public function form(array $form, FormStateInterface $form_state) {
+    $elements = parent::form($form, $form_state);
+    $format   = $this->entity;
+
+    $elements['label'] = array(
+      '#type' => 'textfield',
+      '#title' => $this->t('Label'),
+      '#maxlength' => 255,
+      '#default_value' => $format->label(),
+      '#description' => $this->t("Label for the partial date format."),
+      '#required' => TRUE,
+    );
+    $elements['id'] = array(
+      '#type' => 'machine_name',
+      '#default_value' => $format->id(),
+      '#machine_name' => array(
+        'exists' => array($this, 'exist'),
+      ),
+      '#disabled' => !$format->isNew(),
+    );
+
+    // Additional custom properties.
+    $elements['meridiem'] = array(
+      '#type' => 'radios',
+      '#title' => t('Ante meridiem and Post meridiem format'),
+      '#options' => $format->partial_date_meridiem_options(),
+      '#default_value' => $format->meridiem ?: 'a',
+    );
+    $elements['year_designation'] = array(
+      '#type' => 'radios',
+      '#title' => t('Year designation format'),
+      '#default_value' => $format->year_designation ?: 'bc',
+      '#options' => $format->partial_date_year_designation_options(),
+      '#required' => TRUE,
+      '#description' => t('This controls how year designation is handled: 1BC = 1BCE = -1 and 1AD = 1CE = 1.'),
+    );
+    $components = partial_date_components();
+    $elements['display']   = $this->buildDisplayElements($components, $format);
+    $elements['separator'] = $this->buildSeparatorElements($format);
+
+    $custom = array('c1' => t('Custom component 1'), 'c2' => t('Custom component 2'), 'c3' => t('Custom component 3'), 'approx' => t('Approximation text'));
+    $elements['components'] = $this->buildComponentsTable($components + $custom, $format);
+
+    return $elements;
+  }
+
+  private function buildDisplayElements($components, PartialDateFormat $format) {
+    $elements = array(
+      '#type' => 'fieldset',
+      '#title' => t('Component display'),
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+    );
+
+    foreach ($components as $key => $label) {
+      $elements[$key] = array(
+        '#type' => 'select',
+        '#title' => t('Display source for %label', array('%label' => $label)),
+        '#options' => $format->partial_date_estimate_handling_options(),
+        '#default_value' => $format->display[$key],
+        '#required' => TRUE,
+      );
+    }
+    return $elements;
+  }
+  
+  private function buildSeparatorElements(PartialDateFormat $format) {
+    $elements = array(
+//      '#type' => 'table',
+//      '#header' => array(t('Component'), t('Separator'), ''),
+      '#type' => 'fieldset',
+      '#title' => t('Component separators'),
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+//      '#attributes' => array('class' => array('container-inline')),
+    );
+    $elements['date'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Date separators'),
+//      '#title_display' => 'invisible',
+      '#maxlength' => 15,
+      '#size' => 8,
+      '#default_value' => $format->separator['date'] ?: '/',
+      '#description' => t('This separator is used within date part. Empty value is allowed (ex. 20151231). Add spaces if you needed between the separator and the date values.'),
+    );
+    $elements['time'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Time separators'),
+//      '#title_display' => 'invisible',
+      '#maxlength' => 15,
+      '#size' => 8,
+      '#default_value' => $format->separator['time'] ?: ':',
+      '#description' => t('This separator is used within time component. Empty value is allowed. Add spaces if needed.'),
+    );
+    $elements['datetime'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Date and time separators'),
+//      '#title_display' => 'invisible',
+      '#size' => 8,
+      '#maxlength' => 15,
+      '#default_value' => $format->separator['datetime'] ?: ' ',
+      '#description' => t('This separator is used between date and time components. '),
+      '#attributes' => array('class' => array('field--label-inline')),
+    );
+    $elements['other'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Other separators'),
+//      '#title_display' => 'invisible',
+      '#size' => 8,
+      '#maxlength' => 15,
+      '#default_value' => $format->separator['other'] ?: ' ',
+      '#description' => t('This separator may be used with year estimations. TODO add better description or deprecate.'),
+      '#attributes' => array('class' => array('field--label-inline')),
+    );
+    $elements['range'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Range separator'),
+//      '#title_display' => 'invisible',
+      '#size' => 8,
+      '#maxlength' => 15,
+      '#default_value' => $format->separator['range'] ?: ' to ',
+      '#description' => t('This separator is used to seperate date components in the range element. This defaults to " to " if this field is empty. Add spaces if you need spaces between the separator and the date values.'),
+      '#attributes' => array('class' => array('field--label-inline')),
+    );
+    return $elements;
+  }
+
+  private function buildComponentsTable($components, PartialDateFormat $format) {
+    $table = array(
+      '#type' => 'table',
+//      '#title' => t('Component display'),
+      '#header' => array(t('Component'), t('Weight'), t('Value format'), t('Value empty text') ),
+      '#empty' => t('This should not be empty. Try re-installing Partial Date module.'),
+      '#tableselect' => FALSE,
+      '#tabledrag' => array(
+        array(
+          'action' => 'weight',
+          'relationship' => 'sibling',
+          'group' => 'partial-date-format-order-weight',
+        )
+      )
+    );
+
+    // Build the table rows and columns.
+    foreach ($components as $key => $label) {
+      $component = $format->components[$key];
+      $table[$key]['#attributes']['class'][] = 'draggable';
+      $table[$key]['#weight'] = $component['weight'];
+      $table[$key]['label']['#plain_text'] = $label;
+      $table[$key]['weight'] = array(
+        '#type' => 'weight',
+        '#title' => t('Weight for %label', array('%label' => $label)),
+        '#title_display' => 'invisible',
+        '#default_value' => $component['weight'],
+        '#attributes' => array('class' => array('partial-date-format-order-weight')),
+        '#required' => TRUE,
+      );
+      
+      if (in_array($key, array('c1', 'c2', 'c3', 'approx'))) {
+        $table[$key]['value'] = array(
+          '#type' => 'textfield',
+          '#title' => $label,
+          '#title_display' => 'invisible',
+          '#default_value' => $component['value'],
+        );
+        if ($key == 'approx') {
+          $table[$key]['value']['#description'] = t('Only shows if the date is flagged as approximate.');
+        }
+      }
+      else {
+        $table[$key]['format'] = array(
+          '#type' => 'radios',
+          '#title' => t('Format for %label', array('%label' => $label)),
+          '#title_display' => 'invisible',
+          '#options' => $format->partial_date_component_format_options($key),
+          '#default_value' => $component['format'],
+          '#required' => TRUE,
+        );
+
+        $table[$key]['empty'] = array(
+          '#type' => 'textfield',
+          '#title' => t('Empty text for %label', array('%label' => $label)),
+          '#title_display' => 'invisible',
+          '#default_value' => $component['empty'],
+          '#size' => 8,
+        );
+      }
+    }
+    
+    return $table;
+  }
+  
+  /**
+   * {@inheritdoc}
+   */
+  public function save(array $form, FormStateInterface $form_state) {
+    $format = $this->entity;
+    $status = $format->save();
+
+    if ($status) {
+      drupal_set_message($this->t('Saved the %label format.', array(
+        '%label' => $format->label(),
+      )));
+    }
+    else {
+      drupal_set_message($this->t('The %label format was not saved.', array(
+        '%label' => $format->label(),
+      )));
+    }
+
+    $form_state->setRedirect('entity.partial_date_format.list');
+  }
+
+  public function exist($id) {
+    $entity = $this->entityQuery->get('partial_date_format')
+      ->condition('id', $id)
+      ->execute();
+    return (bool) $entity;
+  }
+  
+}
diff --git a/src/Form/PartialDateSettingsForm.php b/src/Form/PartialDateSettingsForm.php
new file mode 100644
index 0000000..2db27ff
--- /dev/null
+++ b/src/Form/PartialDateSettingsForm.php
@@ -0,0 +1,133 @@
+<?php
+
+namespace Drupal\partial_date\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * PartialDateSettingsForm is a simple config form to manage common settings for Partial Date module/field type
+ *
+ * @author CosminFr
+ */
+class PartialDateSettingsForm extends ConfigFormBase {
+  
+  CONST SETTINGS = 'partial_date.settings';
+  
+  public function getFormId() {
+    return 'partial_date_settings_form';
+  }
+
+  protected function getEditableConfigNames() {
+    return [self::SETTINGS];
+  }
+
+  protected function estimateComponents(){
+    $components = partial_date_components();
+    unset($components['timezone']);
+    return $components;
+  }
+  
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $config = $this->config(self::SETTINGS);
+    //Only show setting you actually want users to edit
+    //TODO: these are just for demo, probably should not be modified by users
+    $form['txt_inline_styles'] = array(
+      '#type' => 'textfield',
+      '#title' => 'Text inline styles',
+      '#default_value' => $config->get('partial_date_component_field_txt_inline_styles'),
+    );
+    $form['inline_styles'] = array(
+      '#type' => 'textfield',
+      '#title' => 'Inline styles',
+      '#default_value' => $config->get('partial_date_component_field_inline_styles'),
+    );
+    
+    $form['estimates'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Base estimate values'),
+      '#collapsible' => TRUE,
+      '#collapsed' => FALSE,
+      '#tree' => TRUE,
+    );
+    $form['estimates']['info'] = array(
+      '#markup' => t('These fields provide options for additional fields that can be used to represent corresponding date / time components. '
+          . 'They define time periods where an event occured when exact details are unknown. <br>'
+          . 'All of these fields have the format <i>"start|end|label"</i>, one per line, where start marks when this period started, '
+          . 'end marks the end of the period and the label is shown to the user. <br>'
+          . '<strong>Note:</strong> if used, the formatters will replace any corresponding date / time component with the options label value.'),
+    );
+    foreach ($this->estimateComponents() as $key => $label) {
+      $lines = $config->get('estimates.'.$key);
+      $form['estimates'][$key] = array(
+        '#type' => 'textarea',
+        '#title' => t('%label range options', array('%label' => $label), array('context' => 'datetime settings')),
+        '#default_value' => implode("\n", $lines),
+        '#description' => t('Provide relative approximations for %label component.', array('%label' => $label), array('context' => 'datetime settings')),
+//        '#element_validate' => $this->partial_date_field_estimates_validate_parse_options(),
+//        '#element_validate' => array(array($this, 'partial_date_field_estimates_validate_parse_options')),
+        '#date_component' => $key,
+      );
+    }
+    
+    return parent::buildForm($form, $form_state);
+  }
+  
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $config = \Drupal::service('config.factory')->getEditable(self::SETTINGS);
+    //Save any changes
+    $config->set('partial_date_component_field_txt_inline_styles', $form_state->getValue('txt_inline_styles'));
+    $config->set('partial_date_component_field_inline_styles', $form_state->getValue('inline_styles'));
+
+    foreach ($this->estimateComponents() as $key => $label) {
+      $lines = $form_state->getValue('estimates')[$key];
+      $config->set('estimates.'.$key, explode('\n', $lines));
+    }
+
+    $config->save();
+    parent::submitForm($form, $form_state);
+  }
+  
+  public function validateForm(array &$form, FormStateInterface $form_state) {
+    //validate "estimates" - previously in partial_date_field_estimates_validate_parse_options()
+    $limits = array(
+      'month' => 12,
+      'day' => 31,
+      'hour' => 23,
+      'minute' => 59,
+      'second' => 59,
+    );
+    foreach ($this->estimateComponents() as $key => $label) {
+      $lines = $form_state->getValue('estimates')[$key];
+      $element = $form['estimates'][$key];
+      foreach (explode("\n", $lines) as $line) {
+        $line = trim($line);
+        if (empty($line)) {
+          continue;
+        }
+        list($from, $to, $label) = explode('|', $line . '||');
+        if (!strlen($from) && !strlen($to)) {
+          continue;
+        }
+        $label = trim($label);
+        if (empty($label)) {
+          $form_state->setError($element, t('The label for the keys %keys is required.', array('%keys' => $from . '|' . $to)));
+        } 
+        elseif (!is_numeric($from) || !is_numeric($to)) {
+          $form_state->setError($element, t('The keys %from and %to must both be numeric.', array('%from' => $from, '%to' => $to)));
+        } 
+        elseif (isset($limits[$key])) {
+          $limit = $limits[$key];
+          // We need to preserve empty strings, so cast to temp variables.
+          $_from = (int) $from;
+          $_to = (int) $to;
+          if ($_to > $limit || $_to < 0 || $_from > $limit || $_from < 0) {
+            $form_state->setError($element, t('The keys %from and %to must be within the range 0 to %max.', array('%from' => $_from, '%to' => $_to, '%max' => $limit)));
+          }
+        }
+      }
+    }
+    parent::validateForm($form, $form_state);
+  }
+  
+}
diff --git a/src/Plugin/Field/FieldFormatter/PartialDateFormatter.php b/src/Plugin/Field/FieldFormatter/PartialDateFormatter.php
new file mode 100644
index 0000000..2202003
--- /dev/null
+++ b/src/Plugin/Field/FieldFormatter/PartialDateFormatter.php
@@ -0,0 +1,663 @@
+<?php 
+
+/**
+ * @file
+ * Contains \Drupal\partial_date\Plugin\Field\FieldFormatter\PartialDateFormatter.
+ */
+
+namespace Drupal\partial_date\Plugin\Field\FieldFormatter;
+
+use Drupal\Core\Field\FormatterBase;
+use DateTime;
+
+/**
+ * Plugin implementation for Partial Date formatter.
+ * (Drupal 7): hook_field_formatter_info() => (Drupal 8): "FieldFormatter" annotation
+ *
+ * @FieldFormatter(
+ *   id = "partial_date_formatter",
+ *   module = "partial_date",
+ *   label = @Translation("Default"),
+ *   description = @Translation("Display partial date."),
+ *   field_types = {
+ *     "partial_date", "partial_date_range",
+ *   },
+ *   quickedit = {
+ *     "editor" = "disabled"
+ *   },
+ *   settings = {
+ *     "use_override" = "none",
+ *     "format" = "short", 
+ *   },
+ * )
+ */
+class PartialDateFormatter extends FormatterBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function defaultSettings() {
+    return array(
+      'use_override' => 'none',
+      'format' => 'short', 
+    ) + parent::defaultSettings();
+  }
+  
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
+    $elements = array();
+
+//    $override = empty($settings['use_override'])? $settings['use_override'] : 'short_long';
+    $elements['use_override'] = array(
+      '#title' => t('Use date descriptions rather than date'),
+      '#type' => 'radios',
+      '#default_value' => $this->getSetting('use_override'),
+      '#required' => TRUE,
+      '#options' => $this->partial_date_txt_override_options(),
+      '#description' => t('This setting allows date values to be replaced with user specified date descriptions, if applicable. This will use the first non-empty value.'),
+    );
+//    $format = isset($settings['format']) ? $settings['format'] : 'medium';
+    $elements['format'] = array(
+      '#title' => t('Partial date format'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('format'),
+      '#required' => TRUE,
+      '#options' => $this->partial_date_format_types(),
+      '#id' => 'partial-date-format-selector',
+      '#attached' => array(
+        'js' => array(drupal_get_path('module', 'partial_date') . '/partial-date-admin.js'),
+      ),
+      '#description' => t('You can use any of the predefined partial date formats. If you have administration proviledges, you can configure partial date formats <a href="%config"> here </a>.',
+          array('%config' => '/admin/config/regional/date-time/partial-date-formats')),
+    );
+
+    return $elements;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsSummary() {
+    $summary = array();
+    if ($this->getSetting('use_override') != 'none') {
+      $overrides = $this->partial_date_txt_override_options();
+      $summary[] = t(' User text: ') . $overrides[$this->getSetting('use_override')];
+    }
+    $types = $this->partial_date_format_types();
+    $summary[] = t(' Format: ') . $types[$this->getSetting('format')];
+    $item = $this->partial_date_generate_date();
+    $example = $this->formatItem($item);
+
+    $summary[] = array(
+      '#prefix' => '<strong>',
+      '#markup' => t(' Examples: '),
+      '#sufix'  => ' </strong> '
+    );
+    $summary[] = $example;
+    return $summary;
+  }
+  
+  /**
+   * {@inheritdoc}
+   * (Drupal 7): hook_field_formatter_view() => (Drupal 8): viewElements
+   *
+   * This handles any text override options before passing the values onto the
+   * partial_date_render() or partial_date_render_range().
+   */
+  public function viewElements(\Drupal\Core\Field\FieldItemListInterface $items, $langcode) {
+    $settings = $this->getSettings();
+//    $field = $this->getFieldSettings();
+//    $has_to_date = strpos($field['type'], 'range');
+//    $has_date = strpos($field['type'], 'date');
+//    $has_time = strpos($field['type'], 'time');
+    $element = array();
+    foreach ($items as $delta => $item) {
+      $override = FALSE;
+      if (!is_array($item)) {
+        continue;
+      }
+      $item += array(
+        'txt_short' => NULL,
+        'txt_long' => NULL,
+        'check_approximate' => 0,
+      );
+      switch ($settings['use_override']) {
+        case 'short':
+          if (strlen($item['txt_short'])) {
+            $override = $item['txt_short'];
+          }
+          break;
+        case 'long':
+          if (strlen($item['txt_long'])) {
+            $override = $item['txt_long'];
+          }
+          break;
+
+        case 'long_short':
+          if (strlen($item['txt_long'])) {
+            $override = $item['txt_long'];
+          }
+          elseif (strlen($item['txt_short'])) {
+            $override = $item['txt_short'];
+          }
+          break;
+        case 'short_long':
+          if (strlen($item['txt_short'])) {
+            $override = $item['txt_short'];
+          }
+          elseif (strlen($item['txt_long'])) {
+            $override = $item['txt_long'];
+          }
+          break;
+      }
+
+      if ($override !== FALSE) {
+        $element[$delta] = array('#markup' => \Drupal\Component\Utility\SafeMarkup::checkPlain($override));
+      }
+      else {
+        $to = $from = FALSE;
+        // The additonal "Approximate only" checkbox.
+        $display['settings']['is_approximate'] = FALSE;
+        if (!empty($widget_settings['theme_overrides']['check_approximate'])) {
+          $display['settings']['is_approximate']  = !empty($item['check_approximate']);
+        }
+        if (isset($item['from'])) {
+          $from = partial_date_field_widget_reduce_date_components($item['from'], TRUE);
+        }
+        if (isset($item['to'])) {
+          $to = partial_date_field_widget_reduce_date_components($item['to'], FALSE);
+        }
+
+        $markup = '';
+        if ($to && $from) {
+          $markup = partial_date_render_range($from, $to, $display['settings']);
+        }
+        elseif ($to xor $from) {
+          $markup = partial_date_render($from ? $from : $to, $display['settings']);
+        }
+        unset($display['settings']['is_approximate']);
+        if ($markup) {
+          $element[$delta] = array('#markup' => $markup);
+        }
+      }
+    }
+    return $element;
+  }
+  
+  protected function loadFormats() {
+    $storage = \Drupal::entityTypeManager()->getStorage('partial_date_format');
+    $qry = \Drupal::entityQuery('partial_date_format')
+//      ->condition('id', $id)
+      ->execute();
+    $formats = $storage->loadMultiple($qry);
+    return $formats;
+  }
+
+################################################################################
+#  Helpers:                                                                    #
+#   * partial_date_format_default_options()                                    #
+#     Default formatter options for the supported format types.                #
+#      - moved to config/install/partial_date.format.*.yml                     #
+#                                                                              #
+#   * partial_date_format_types()                                              #
+#     The core format types implemented by the module. Since we are not with   #
+#     complete dates, we can not fallback on the standard PHP formatters.      #
+#                                                                              #
+#   * partial_date_generate_date()                                             #
+#     Generates an example date item for deminstration of format only.         #
+#     This may not represent the parameters that are passed in.                #
+#                                                                              #
+#   * partial_date_txt_override_options()                                      #
+#     Formatter options on how to use the date descriptions.                   #
+#                                                                              #
+#   * partial_date_estimate_handling_options()                                 #
+#     Formatter options on how to display the estimate values.                 #
+#                                                                              #
+################################################################################
+
+  function partial_date_render_range($from = NULL, $to = NULL, $settings = array()) {
+    if (empty($from) && empty($to)) {
+      return '';
+    }
+    // TODO: Make this configurable.
+    $settings += array(
+      'reduce' => TRUE,
+      'format' => 'short',
+    );
+    if ($settings['reduce']) {
+      partial_date_reduce_range_values($from, $to);
+    }
+
+    $from = partial_date_render($from, $settings);
+    $to = partial_date_render($to, $settings);
+
+    if ($to && $from) {
+      // @FIXME
+  // theme() has been renamed to _theme() and should NEVER be called directly.
+  // Calling _theme() directly can alter the expected output and potentially
+  // introduce security issues (see https://www.drupal.org/node/2195739). You
+  // should use renderable arrays instead.
+  // 
+  // 
+  // @see https://www.drupal.org/node/2195739
+  // return theme('partial_date_range', array('from' => $from, 'to' => $to, 'settings' => $settings));
+
+    }
+    // One or both will be empty.
+    return $from . $to;
+  }
+
+  function partial_date_render($item, $settings = array()) {
+    if (empty($item)) {
+      return '';
+    }
+//    $settings += array(
+//      'format' => 'short',
+//      'is_approximate' => 0,
+//    );
+
+    // @FIXME
+  // theme() has been renamed to _theme() and should NEVER be called directly.
+  // Calling _theme() directly can alter the expected output and potentially
+  // introduce security issues (see https://www.drupal.org/node/2195739). You
+  // should use renderable arrays instead.
+  // 
+  // 
+  // @see https://www.drupal.org/node/2195739
+  // return theme('partial_date', array(
+  //     'item' => $item,
+  //     'settings' => $settings['component_settings'],
+  //     'format' => $settings['format'],
+  //     'is_approximate' => $settings['is_approximate'],
+  //   ));
+    return array(
+      '#theme' => 'partial_date',
+      'item' => $item,
+      '#format' => $this->getSetting('format'),
+      'is_approximate' => $this->getSetting('is_approximate'),
+    );
+  }
+
+  function partial_date_format_types() {
+    $formats = $this->loadFormats();
+    $types = array();
+    foreach($formats as $key => $format) {
+      $types[$key] = $format->label(); 
+    }
+    return $types;
+  }
+
+  function partial_date_format_settings($type) {
+    $settings = $this->getSettings();
+    if (!isset($settings[$type])) {
+      $type = 'short'; //TODO set a configuration for default format
+    }
+    return $settings[$type];
+  }
+
+
+  function partial_date_txt_override_options() {
+    return array(
+      'none' => t('Use date only', array(), array('context' => 'datetime')),
+      'short' => t('Use short description', array(), array('context' => 'datetime')),
+      'long' => t('Use long description', array(), array('context' => 'datetime')),
+      'long_short' => t('Use long or short description', array(), array('context' => 'datetime')),
+      'short_long' => t('Use short or long description', array(), array('context' => 'datetime')),
+    );
+  }
+
+
+  /**
+   * Helper function to assign the correct components into an array that the
+   * formatters can use.
+   */
+  function partial_date_field_widget_reduce_date_components($item, $is_start = TRUE, $is_approx = FALSE) {
+    if (empty($item)) {
+      return FALSE;
+    }
+    $components = array();
+    foreach (partial_date_components() as $key => $title) {
+      if (!empty($item[$key . '_estimate'])) {
+        list($start, $end) = explode('|', $item[$key . '_estimate']);
+        $components[$key] = $is_start ? $start : $end;
+        $components[$key . '_estimate'] = $item[$key . '_estimate'];
+        // We hit this on save, so we can not rely on the load set.
+        if (isset($item[$key . '_estimate_label'])) {
+          $components[$key . '_estimate_label'] = $item[$key . '_estimate_label'];
+          $components[$key . '_estimate_value'] = $item[$key . '_estimate_value'];
+        }
+        if (isset($item[$key . '_estimate_value'])) {
+          $components[$key . '_estimate_value'] = $item[$key . '_estimate_value'];
+        }
+      }
+      else {
+        $components[$key] = isset($item[$key]) && strlen($item[$key]) ? $item[$key] : NULL;;
+      }
+    }
+    // No easy way to test a 0 value :{
+    $has_data = FALSE;
+    foreach ($components as $key => $value) {
+      if (strlen($value)) {
+        $has_data = TRUE;
+        break;
+      }
+    }
+    if (!$has_data) {
+      return FALSE;
+    }
+    return $components;
+  }
+
+  /**
+   * This generates a date component based on the specified timestamp and
+   * timezone. This is used for demonstrational purposes only, and may fall back
+   * to the request timestamp and site timezone.
+   *
+   * This could throw errors if outside PHP's native date range.
+   */
+  function partial_date_generate_date($timestamp = REQUEST_TIME, $timezone = NULL) {
+    // PHP Date should handle any integer, but outside of the int range, 0 is
+    // returned by intval(). On 32 bit systems this is Fri, 13 Dec 1901 20:45:54
+    // and Tue, 19 Jan 2038 03:14:07 GMT
+    $timestamp = intval($timestamp);
+    if (!$timestamp) {
+      $timestamp = REQUEST_TIME;
+    }
+    if (!$timezone) {
+      //$timezones = partial_date_granularity_field_options('timezone');
+      //$timezone = $timezones[rand(0, count($timezones) - 1)];
+      $timezone = partial_date_timezone_handling_correlation('UTC', 'site');
+    }
+    try {
+      $tz = new \DateTimeZone($timezone);
+      $date = new DateTime('@' . $timestamp, $tz);
+      if ($date) {
+        return array(
+          'year' => $date->format('Y'),
+          'month' => $date->format('n'),
+          'day' => $date->format('j'),
+          'hour' => $date->format('G'),
+          'minute' => $date->format('i'),
+          'second' => $date->format('s'),
+          'timezone' => $timezone,
+        );
+      }
+    }
+    catch (Exception $e) {}
+
+    return FALSE;
+  }
+
+  protected function getCurrentFormat(){
+    $formats = $this->loadFormats();
+    $current = $this->getSetting('format');
+    return $formats[$current];
+  }
+
+public function formatItem($item) {
+  $components = array();
+  $format = $this->getCurrentFormat();
+  uasort($format->components, 'partial_date_sort');
+  // Enforce meridiem if we have a 12 hour format.
+  if (isset($format->components['hour'])
+      && ($format->components['hour'] == 'h' || $format->components['hour'] == 'g')) {
+    if (empty($format->meridiem)) {
+      $format->meridiem = 'a';
+    }
+  }
+
+  // Hide year designation if no valid year.
+  if (empty($item['year'])) {
+    $format->year_designation = '';
+  }
+
+//  //TODO - review "is_approximate" functionality
+//  if (empty($settings['is_approximate']) || !isset($settings['is_approximate'])) {
+//    $settings['components']['approx'] = '';
+//  }
+
+  $valid_components = partial_date_components();
+  $last_type = FALSE;
+  foreach ($format->components as $type => $component) {
+    $markup = '';
+    if (isset($valid_components[$type])) {
+      // Value is determined by the $settings['display]
+      // If estimate, use this other use value
+      $display_type = empty($format->display[$type]) ? 'estimate_label' : $format->display[$type];
+      $estimate = empty($item[$type . '_estimate']) ? FALSE : $item[$type . '_estimate'];
+//      $value = isset($item[$type]) && strlen($item[$type]) ? $item[$type] : FALSE;
+      // If no estimate, switch to the date only formating option.
+      if (!$estimate && ($display_type == 'date_or' || strpos($display_type, 'estimate_') === 0)) {
+        $display_type = 'date_only';
+      }
+
+      switch ($display_type) {
+        case 'none':
+          // We need to avoid adding an empty option.
+          continue;
+
+        case 'date_only':
+        case 'date_or':
+          $markup = $this->formatComponent($type, $item, $format);
+          break;
+
+        case 'estimate_label':
+          $markup = $item[$type . '_estimate_label'];
+          // We no longer have a date / time like value.
+          $type = 'other';
+          break;
+
+        case 'estimate_range':
+          list($start, $end) = explode('|', $item[$type . '_estimate']);
+          $item[$type] = $start;
+          $item[$type . '_to'] = $end;
+          $markup = $this->formatComponent($type, $item, $format);
+//          $end = $this->formatComponent($end, $component['format'], $item, $settings);
+//          if (strlen($start) && strlen($end)) {
+//            $markup = t('@estimate_start to @estimate_end', array('@estimate_start' => $start, '@estimate_end' => $end));
+//          }
+//          elseif (strlen($start) xor strlen($end)) {
+//            $markup = strlen($start) ? $start : $end;
+//          }
+          break;
+
+        case 'estimate_component':
+//          $markup = $this->formatComponent($item[$type . '_estimate_value'], $component['format'], $item, $settings);
+          $item[$type] = $item[$type . '_estimate_value'];
+          $markup = $this->formatComponent($type, $item, $format);
+          break;
+      }
+
+      if (!strlen($markup)) {
+        if (isset($component['empty']) && strlen($component['empty'])) {
+          // What do we get? If numeric, assume a date / time component, otherwise
+          // we can assume that we no longer have a date / time like value.
+          $markup = $component['empty'];
+          if (!is_numeric($markup)) {
+            $type = 'other';
+          }
+        }
+      }
+      if (strlen($markup)) {
+        if ($separator = _partial_date_component_separator($last_type, $type, $format->separator)) {
+          $components[] = $separator;
+        }
+        $components[] = $markup;
+        $last_type = $type;
+      }
+    }
+    elseif (isset($component['value']) && strlen($component['value'])) {
+      if ($separator = _partial_date_component_separator($last_type, $type, $format->separator)) {
+        $components[] = $separator;
+      }
+      $components[] = $component['value'];
+      $last_type = $type;
+    }
+
+  }
+  return implode('', $components);
+}
+
+//function formatComponent($value, $format, &$date, $additional = array()) {
+function formatComponent($key, $date, $formatSettings) {
+  $value = isset($date[$key]) && strlen($date[$key]) ? $date[$key] : FALSE;
+  if (!$value) {
+    return ''; //if component value is missing, return an empty string.
+  }
+  $format = $formatSettings->components[$key]['format'];
+  
+  // If dealing with 12 hour times, recalculate the value.
+  if ($format == 'h' || $format == 'g') {
+    if ($value > 12) {
+      $value -= 12;
+    }
+    elseif ($value == 0) {
+      $value = '12';
+    }
+  }
+  // Add suffixes for year and time formats
+  $suffix = '';
+  switch ($format) {
+    case 'd-S':
+    case 'j-S':
+      $suffix = partial_date_day_ordinal_suffix($value);
+      break;
+
+    case 'y-ce':
+    case 'Y-ce':
+      $suffix = partial_date_year_designation_decorator($value, $formatSettings->year_designation);
+      if (!empty($suffix) && !empty($value)) {
+        $value = abs($value);
+      }
+      break;
+  }
+
+  switch ($format) {
+    case 'y-ce':
+    case 'y':
+      return (strlen($value) > 2 ?  substr($value, - 2) : $value) . $suffix;
+
+    case 'F':
+      return partial_date_month_names($value) . $suffix;
+
+    case 'M':
+      return partial_date_month_abbreviations($value) . $suffix;
+
+    // Numeric representation of the day of the week  0 (for Sunday) through 6 (for Saturday)
+    case 'w':
+      if (!empty($date['year']) && !empty($date['month'])) {
+        return partial_date_day_of_week($date['year'], $date['month'], $value) . $suffix;
+      }
+      return '';
+
+    // A full textual representation of the day of the week.
+    case 'l':
+    // A textual representation of a day, three letters.
+    case 'D':
+      if (!empty($date['year']) && !empty($date['month'])) {
+        $day = partial_date_day_of_week($date['year'], $date['month'], $value);
+        if ($format == 'D') {
+          return partial_date_weekday_name_abbreviations($day, 3) . $suffix;
+        }
+        else {
+          return partial_date_weekday_names($day) . $suffix;
+        }
+      }
+      return '';
+
+    case 'n':
+    case 'j':
+    case 'j-S':
+    case 'g':
+    case 'G':
+      return intval($value) . $suffix;
+
+    case 'd-S':
+    case 'd':
+    case 'h':
+    case 'H':
+    case 'i':
+    case 's':
+    case 'm':
+      return sprintf('%02s', $value) . $suffix;
+
+    case 'Y-ce':
+    case 'Y':
+    case 'e':
+      return $value . $suffix;
+
+    case 'T':
+      try {
+        $tz = new DateTimeZone($value);
+        $transitions = $tz->getTransitions();
+        return $transitions[0]['abbr']  . $suffix;
+      }
+      catch (Exception $e) {}
+      return '';
+
+
+    // Todo: implement
+    // Year types
+    // ISO-8601 year number
+    case 'o':
+
+    // Day types
+    // The day of the year
+    case 'z':
+    // ISO-8601 numeric representation of the day of the week
+    case 'N':
+
+    // Timezone offsets
+    // Whether or not the date is in daylight saving time
+    case 'I':
+    // Difference to Greenwich time (GMT) in hours
+    case 'O':
+    // Difference to Greenwich time (GMT) with colon between hours and minutes
+    case 'P':
+    // Timezone offset in seconds
+    case 'Z':
+
+    default:
+      return '';
+  }
+}
+
+/**
+ * Gets day of week, 0 = Sunday through 6 = Saturday.
+ *
+ * Pope Gregory removed 10 days - October 5 to October 14 - from the year 1582
+ * and proclaimed that from that time onwards 3 days would be dropped from the
+ * calendar every 400 years.
+ *
+ * Thursday, October 4, 1582 (Julian) was followed immediately by Friday,
+ * October 15, 1582 (Gregorian).
+ *
+ * @see PEAR::Date_Calc
+ */
+function partial_date_day_of_week($year, $month, $day) {
+  $greg_correction = 0;
+  if ($year < 1582 || ($year == 1582 && ($month < 10 || ($month == 10 && $day < 15)))) {
+    $greg_correction = 3;
+  }
+
+  if ($month > 2) {
+    $month -= 2;
+  }
+  else {
+    $month += 10;
+    $year--;
+  }
+
+  $day = floor((13 * $month - 1) / 5) +
+         $day + ($year % 100) +
+         floor(($year % 100) / 4) +
+         floor(($year / 100) / 4) - 2 *
+         floor($year / 100) + 77 + $greg_correction;
+
+  return $day - 7 * floor($day / 7);
+}
+
+  
+}
diff --git a/src/Plugin/Field/FieldType/PartialDateTime.php b/src/Plugin/Field/FieldType/PartialDateTime.php
new file mode 100644
index 0000000..36561cc
--- /dev/null
+++ b/src/Plugin/Field/FieldType/PartialDateTime.php
@@ -0,0 +1,289 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\partial_date\Plugin\Field\FieldType\PartialDateTime.
+ */
+
+namespace Drupal\partial_date\Plugin\Field\FieldType;
+
+use Drupal\Core\Field\FieldItemBase;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\TypedData\DataDefinition;
+
+/**
+ * Plugin implementation of the 'partial_date' field type.
+ *
+ * @FieldType(
+ *   id = "partial_date",
+ *   label = @Translation("Partial date and time"),
+ *   description = @Translation("This field stores and renders partial dates."),
+ *   module = "partial_date",
+ *   default_widget = "partial_date_widget",
+ *   default_formatter = "partial_date_formatter",
+ * )
+ *
+ * 
+ */
+
+class PartialDateTime extends FieldItemBase {
+
+  /**
+   * Cache for whether the host is a new revision.
+   *
+   * Set in preSave and used in update().  By the time update() is called
+   * isNewRevision() for the host is always FALSE.
+   *
+   * @var bool
+   */
+  protected $newHostRevision;
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function propertyDefinitions(FieldStorageDefinitionInterface $field_definition) {
+    $properties['value'] = DataDefinition::create('float')
+      ->setLabel(t('Timestamp'))
+      ->setDescription('Contains best approximation for date value');
+    $properties['value_to'] = DataDefinition::create('float')
+      ->setLabel(t('End timestamp'))
+      ->setDescription('Contains the end value of the partial date');
+    $properties['txt_short'] = DataDefinition::create('string')
+      ->setLabel(t('Short text'));
+    $properties['txt_long'] = DataDefinition::create('string')
+      ->setLabel(t('Long text'));
+    //Components: 'year', 'month', 'day', 'hour', 'minute', 'second', 'timezone'
+    foreach (partial_date_components() as $key => $label) {
+      if ($key == 'timezone') {
+        $properties[$key] = DataDefinition::create('string')
+          ->setLabel($label);
+      } else {
+        $startDescription = t('The ' . $label . ' for the starting date component.');
+        $endDescription   = t('The ' . $label . ' for the finishing date component.');
+        $properties[$key] = DataDefinition::create('integer')
+           ->setLabel($label)
+           ->setDescription($startDescription) ;
+        $properties[$key.'_to'] = DataDefinition::create('integer')
+           ->setLabel($label. t(' end '))
+           ->setDescription($endDescription) ;
+      } 
+    }
+    return $properties;
+  }
+
+  /**
+   * {@inheritdoc}
+   * Equivalent of hook_field_schema().
+   *
+   * This module stores a dates in a string that represents the data that the user
+   * entered and a float timestamp that represents the best guess for the date.
+   *
+   * After tossing up the options a number of times, I've taken the conservative
+   * opinion of storing all date components separately rather than storing these
+   * in a singular field.
+   */
+  public static function schema(FieldStorageDefinitionInterface $field) {
+    $schema = array(
+      'columns' => array(
+        'value' => array(
+          'type' => 'float',
+          'size' => 'big',
+          'description' => 'The calculated timestamp for a date stored in UTC as a float for unlimited date range support.',
+          'not null' => TRUE,
+          'default' => 0,
+          'sortable' => TRUE,
+        ),
+        'value_to' => array(
+          'type' => 'float',
+          'size' => 'big',
+          'description' => 'The calculated timestamp for end date stored in UTC as a float for unlimited date range support.',
+          'not null' => TRUE,
+          'default' => 0,
+          'sortable' => TRUE,
+        ),
+        // These are instance settings, so add to the schema for every field.
+        'txt_short' => array(
+          'type' => 'varchar',
+          'length' => 100,
+          'description' => 'A editable display field for this date for the short format.',
+          'not null' => FALSE,
+          'sortable' => TRUE,
+        ),
+        'txt_long' => array(
+          'type' => 'varchar',
+          'length' => 255,
+          'description' => 'A editable display field for this date for the long format.',
+          'not null' => FALSE,
+          'sortable' => TRUE,
+        ),
+//        'data' => array(
+//          'description' => 'The configuration data for the effect.',
+//          'type' => 'blob',
+//          'not null' => FALSE,
+//          'size' => 'big',
+//          'sortable' => FALSE,
+//        ),
+      ),
+      'indexes' => array(
+        'main' => array('value'),
+        'by_end' => array('value_to'),
+      ),
+    );
+
+    foreach (partial_date_components() as $key => $label) {
+      if ($key == 'timezone') {
+        $schema['columns'][$key] = array(
+          'type' => 'varchar',
+          'length' => 50,
+          'description' => 'The ' . $label . ' for the time component.',
+          'not null' => FALSE,
+          'default' => NULL,
+        );
+      }
+      else {
+        $column = array(
+          'type' => 'int',
+          'description' => 'The ' . $label . ' for the starting date component.',
+          'not null' => FALSE,
+          'default' => NULL,
+          'size' => ($key == 'year' ? 'big' : 'small'),
+        );
+        $schema['columns'][$key] = $column;
+        //Add "*_to" columns
+        $column['description'] = 'The ' . $label . ' for the finishing date component.';
+        $schema['columns'][$key . '_to'] = $column;
+      }
+    }
+    return $schema;
+  }
+
+
+  protected function deleteConfig($configName) {
+    //$config = \Drupal::service('config.factory')->getEditable($configName);
+    $config = \Drupal::configFactory()->getEditable($configName);
+    if (isset($config)) {
+      $config->delete();
+    }
+  }
+
+  public function delete() {
+    $this->deleteConfig('partial_date.settings');
+    $this->deleteConfig('partial_date.format');
+    parent::delete();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isEmpty() {
+  //  return !$this->value;
+    $val = $this->get('value')->getValue();
+    $val_to = $this->get('value_to')->getValue();
+    $txtShort = $this->get('txt_short')->getValue();
+    $txtLong = $this->get('txt_long')->getValue();
+//    $item = $this->getEntity();
+//    if ((isset($item['_remove']) && $item['_remove']) || !is_array($item)) {
+//      return TRUE;
+//    }
+//    foreach (array('from', 'to') as $base) {
+//      if (empty($item[$base])) {
+//        continue;
+//      }
+//      foreach (partial_date_components() as $key => $label) {
+//        if ($key == 'timezone') {
+//          continue;
+//        }
+//        if (isset($item[$base][$key]) && strlen($item[$base][$key])) {
+//          return FALSE;
+//        }
+//        if (isset($item[$base][$key . '_estimate']) && strlen($item[$base][$key . '_estimate'])) {
+//          return FALSE;
+//        }
+//      }
+//    }
+//
+//    return !((isset($item['txt_short']) && strlen($item['txt_short'])) ||
+//           (isset($item['txt_long']) && strlen($item['txt_long'])));
+    return !(  isset($val) || isset($val_to) ||
+              (isset($txtShort) && strlen($txtShort)) ||
+              (isset($txtLong)  && strlen($txtLong) )
+            );
+  }
+
+  /**
+   * Helper function to duplicate the same settings on both the instance and field
+   * settings.
+   */
+  public function fieldSettingsForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
+//    //parent::fieldSettingsForm($form, $form_state);
+    $settings = $this->getSettings();
+    $field    = $this->getFieldDefinition();
+    $elements = array();
+    $elements['minimum_components'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Minimum components'),
+      '#description' => t('These are used to determine if the field is incomplete during validation. All possible fields are listed here, but these are only checked if enabled in the instance settings.'),
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+      '#tree' => TRUE,
+    );
+    $has_range = strpos($field->getType(), '_range');
+    foreach (partial_date_components() as $key => $label) {
+      $elements['minimum_components']['from_granularity_' . $key] = array(
+        '#type' => 'checkbox',
+        '#title' => $has_range ? t('From @date_component', array('@date_component' => $label)) : $label,
+        '#default_value' => !empty($settings['minimum_components']['from_granularity_' . $key]),
+      );
+    }
+    foreach (partial_date_components(array('timezone')) as $key => $label) {
+      $elements['minimum_components']['from_estimates_' . $key] = array(
+        '#type' => 'checkbox',
+        '#title' => $has_range
+            ? t('From Estimate @date_component', array('@date_component' => $label))
+            : t('Estimate @date_component', array('@date_component' => $label)),
+        '#default_value' => !empty($settings['minimum_components']['from_estimates_' . $key]),
+      );
+    }
+    if ($has_range) {
+      foreach (partial_date_components() as $key => $label) {
+        $elements['minimum_components']['to_granularity_' . $key] = array(
+          '#type' => 'checkbox',
+          '#title' => t('To @date_component', array('@date_component' => $label)),
+          '#default_value' => !empty($settings['minimum_components']['to_granularity_' . $key]),
+        );
+      }
+      foreach (partial_date_components(array('timezone')) as $key => $label) {
+        $elements['minimum_components']['to_estimates_' . $key] = array(
+          '#type' => 'checkbox',
+          '#title' => t('To Estimate @date_component', array('@date_component' => $label)),
+          '#default_value' => !empty($settings['minimum_components']['to_estimates_' . $key]),
+        );
+      }
+    }
+    $elements['minimum_components']['txt_short'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Short date text'),
+      '#default_value' => !empty($settings['minimum_components']['txt_short']),
+    );
+    $elements['minimum_components']['txt_long'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Long date text'),
+      '#default_value' => !empty($settings['minimum_components']['txt_long']),
+    );
+    return $elements;
+  }
+  
+  public function preSave() {
+    parent::preSave();
+  }
+  
+  public static function defaultFieldSettings() {
+    return array(
+      'path' => '',
+      'hide_blank_items' => TRUE,
+      'minimum_components' => array(),
+    ) + parent::defaultFieldSettings();
+  }
+  
+  
+}
diff --git a/src/Plugin/Field/FieldWidget/PartialDateWidget.php b/src/Plugin/Field/FieldWidget/PartialDateWidget.php
new file mode 100644
index 0000000..c8846dc
--- /dev/null
+++ b/src/Plugin/Field/FieldWidget/PartialDateWidget.php
@@ -0,0 +1,454 @@
+<?php 
+
+/**
+ * @file
+ * Contains \Drupal\partial_date\Plugin\Field\FieldWidget\PartialDateWidget.
+ */
+
+namespace Drupal\partial_date\Plugin\Field\FieldWidget;
+
+use Drupal\Core\Field\WidgetBase;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Provides an widget for Partial Date fields.
+ * (Drupal 7): hook_field_widget_info() => (Drupal 8): "FieldWidget" annotation
+ *
+ * @FieldWidget(
+ *   id = "partial_date_widget",
+ *   label = @Translation("Partial date"),
+ *   field_types = {
+ *     "partial_date",
+ *     "partial_date_range", 
+ *   },
+ * )
+ */
+class PartialDateWidget extends WidgetBase {
+
+  /**
+   * {@inheritdoc}
+   * (Drupal 7): hook_field_widget_form() => (Drupal 8): PartialDateWidget::formElement
+   */
+  public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
+    $current_langcode = \Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED;
+    $help_txt = $this->_partial_date_widget_help_text($current_langcode);
+
+    $settings = $this->getSettings();
+    $field    = $items[$delta];
+    $fieldDef = $field->getFieldDefinition();
+    $type     = $fieldDef->getType();
+    $hasRange = strpos($type, 'range');
+
+    $inline_range_style = FALSE;
+    if ($hasRange && !empty($settings['theme_overrides']['range_inline'])) {
+      $inline_range_style = ' style="' . _partial_date_inline_float_css(FALSE) . '"';
+    }
+    // Fix the title on multi-value fields.
+    if (empty($element['#title'])) {
+      $element['#title_display'] = 'invisible';
+    }
+    elseif ($fieldDef->getFieldStorageDefinition()->getCardinality() == 1) {
+      $element['#type'] = 'item';
+    }
+    $element['#tree'] = TRUE;
+
+    $value = $field->getValue();
+
+    // General styles to nicely format the element inline without having to load
+    // external style sheets.
+    $config = \Drupal::config('partial_date.settings');
+    $css = $config->get('partial_date_component_field_inline_styles');
+    $css_txt = $config->get('partial_date_component_field_txt_inline_styles');
+
+    // Correct the timezone based on the widget values.
+    $tz_from = empty($value) || empty($value['from']) || empty($value['from']['timezone']) ? NULL : $value['from']['timezone'];
+    $value['from']['timezone'] = partial_date_timezone_handling_correlation($tz_from, $settings['tz_handling']);
+
+    if (!partial_date_timezone_option_is_selectable($settings['tz_handling'])) {
+      unset($settings['granularity']['from']['timezone']);
+      if ($hasRange) {
+        unset($settings['granularity']['to']['timezone']);
+      }
+    }
+
+    $estimate_options = $config->get('estimates');
+    $increments = empty($settings['increments']) ? array() : $settings['increments'];
+    $element['from'] = array(
+      '#type' => 'partial_datetime_element',
+      '#title' => $hasRange ? t('Start date') : t('Date'),
+      '#title_display' => 'invisible',
+      '#default_value' => $value['from'],
+      '#granularity' => $settings['granularity']['from'],
+      '#estimates' => $settings['estimates']['from'],
+      '#estimate_options' => $estimate_options,
+      '#component_styles' => $css,
+      '#increments' => $increments,
+    );
+    if ($inline_range_style) {
+//      $element['from']['#attributes']['style'] = $inline_range_style;
+//      $element['from']['#theme_wrappers'] = array('partial_date_inline_form_element');
+//      $element['#theme'] = 'partial_date_range_inline_element';
+      $element['from']['#type'] = 'partial_date_inline_element';
+    }
+
+    if ($hasRange) {
+      $element['_separator'] = array(
+        '#type' => 'markup',
+        '#markup' => t('<div class="partial-date-separator"' . $inline_range_style . '>to</div>', array(), array('context' => 'datetime')),
+      );
+      // Correct the timezone based on the widget values.
+      $tz_to = empty($value) || empty($value['to']) || empty($value['to']['timezone']) ? NULL : $value['to']['timezone'];
+      $value['to']['timezone'] = partial_date_timezone_handling_correlation($tz_to, $settings['tz_handling']);
+      $element['to'] = array(
+        '#type' => 'partial_datetime_element',
+        '#title' => $hasRange ? t('Start date') : t('Date'),
+        '#title_display' => 'invisible',
+        '#default_value' => $value['to'],
+        '#granularity' => $settings['granularity']['to'],
+        '#estimates' => $settings['estimates']['to'],
+        '#estimate_options' => $estimate_options,
+        '#component_styles' => $css,
+        '#increments' => $increments,
+      );
+      if ($inline_range_style) {
+        $element['to']['#attributes']['style'] = $inline_range_style;
+        $element['to']['#theme_wrappers'] = array('partial_date_inline_form_element');
+      }
+    }
+
+    $element['#component_help'] = $help_txt['components']; //field_filter_xss($help_txt['components']);
+    if (!empty($settings['theme_overrides']['check_approximate'])) {
+      $element['check_approximate'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Approximation only', array(), array('context' => 'datetime')),
+        '#default_value' => empty($value['check_approximate']) ? 0 : $value['check_approximate'],
+      );
+      if (!empty($help_txt['check_approximate'])) {
+        $element['check_approximate']['#description'] = $help_txt['check_approximate']; //field_filter_xss($help_txt['check_approximate']);
+      }
+    }
+
+    // Calculate these for any JScript states.
+    $parents = array();
+    if (!empty($element['#field_parents'])) {
+      $parents = $element['#field_parents'];
+    }
+    elseif (!empty($element['#parents'])) {
+      $parents = $element['#parents'];
+    }
+    // field_partial_dates[und][0][check_approximate]
+    $parents[] = $field->getName();// ['field_name'];
+    $parents[] = $current_langcode;
+
+    foreach (array('txt_short', 'txt_long') as $key) {
+      if (!empty($settings['theme_overrides'][$key])) {
+        $description = NULL;
+        if (!empty($help_txt[$key])) {
+          $description = $help_txt[$key]; //field_filter_xss($help_txt[$key]);
+        }
+
+        $element[$key] = array(
+          '#type' => 'textfield',
+          '#title' => $description,
+          '#description' => $description,
+          '#title_display' => 'invisible',
+          '#default_value' => $field->get($key)->getValue() ?: $key,   //empty($value[$key]) ? '' : $value[$key],
+          '#prefix' => '<div class="partial-date-' . $key . '"' . ($css_txt ? ' style="' . $css_txt . '"' : '') . '>',
+          '#suffix' => '</div>',
+          '#maxlength' => 255,
+        );
+      }
+    }
+
+    $element['_remove'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Remove date', array(), array('context' => 'datetime')),
+      '#default_value' => 0,
+      '#access' => empty($settings['hide_remove']),
+      '#prefix' => '<div class="partial-date-remove" ' . ($css_txt ? ' style="' . $css_txt . '"' : '') . '>',
+      '#suffix' => '</div>',
+    );
+    if (!empty($help_txt['_remove'])) {
+      $element['_remove']['#description'] = $help_txt['_remove']; //field_filter_xss($help_txt['_remove']);
+    }
+
+    $element['#prefix'] = '<div class="clearfix">';
+    $element['#suffix'] = '</div>';
+    return $element;
+    
+  }
+
+  public static function defaultSettings() {
+
+    return array(
+      'year_estimates' => 0,
+      'range_empty_start' => 1,
+      'year_estimates_values' => '',
+      'tz_handling' => 'none',
+      'theme_overrides' => array(
+        'check_approximate' => 0,
+        'txt_short' => 0,
+        'txt_long' => 0,
+        'range_inline' => 0,
+      ),
+      'granularity' => array(
+        'from' => partial_date_components(),
+        'to' => partial_date_components(),
+      ),
+      'estimates' => array(
+        'from' => array_combine(array_keys(partial_date_components(array('timezone'))), array_fill(0, 6, '')),
+        'to' => array_combine(array_keys(partial_date_components(array('timezone'))), array_fill(0, 6, '')),
+      ),
+      'increments' => array(
+        'second' => 1,
+        'minute' => 1,
+      ),
+      'hide_remove' > 0,
+      // @todo: i18n support here.
+      'help_txt' => array(),
+    ) + parent::defaultSettings();
+  }
+  
+  /**
+   * {@inheritdoc}
+   * (Drupal 7): hook_field_widget_settings_form() => (Drupal 8): PartialDateWidget::settingsForm
+   */
+  public function settingsForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
+    $settings = $this->getSettings();
+//    $field    = $this->getFieldSettings();
+    $has_range = TRUE; //strpos($field['type'], 'range');
+//
+    $elements = array();
+
+    $options = partial_date_components();
+
+    $elements['granularity'] = array('#tree' => TRUE);
+    $elements['granularity']['from'] = array(
+      '#type' => 'checkboxes',
+      '#title' => t('Date components'),
+      '#default_value' => $settings['granularity']['from'],
+      '#options' => $options,
+      '#attributes' => array('class' => array('container-inline')),
+      '#description' => t('Select the date attributes to collect and store.'),
+      '#weight' => -10,
+    );
+    unset($options['timezone']); //prevent timezone estimate.
+    $elements['estimates'] = array('#tree' => TRUE);
+    $elements['estimates']['from'] = array(
+      '#type' => 'checkboxes',
+      '#title' => t('Date component estimates'),
+      '#default_value' => $settings['estimates']['from'],
+      '#options' => $options,
+      '#attributes' => array('class' => array('container-inline')),
+      '#description' => t('Select the date component estimate attributes that you want to expose.'),
+      '#weight' => -9,
+    );
+
+    if ($has_range) {
+      $elements['granularity']['to'] = $elements['granularity']['from'];
+      $elements['granularity']['to']['#title'] = t('Date components (to date)');
+      $elements['granularity']['to']['#default_value'] = $settings['granularity']['to'];
+      $elements['granularity']['to']['#weight'] = -8;
+      $elements['granularity']['from']['#title'] = t('Date components (from date)');
+
+      $elements['estimates']['to'] = $elements['estimates']['from'];
+      $elements['estimates']['to']['#title'] = t('Date component estimates (to date)');
+      $elements['estimates']['to']['#default_value'] = $settings['estimates']['to'];
+      $elements['estimates']['to']['#weight'] = -7;
+      $elements['estimates']['from']['#title'] = t('Date component estimates (from date)');
+    }
+
+    $tz_options = partial_date_timezone_handling_options();
+    $elements['tz_handling'] = array(
+      '#type' => 'select',
+      '#title' => t('Time zone handling'),
+      '#default_value' => $settings['tz_handling'],
+      '#options' => $tz_options,
+      '#required' => TRUE,
+      '#weight' => -6,
+      '#description' => t('Select the timezone handling method for this field. Currently, this is only used to calculate the timestamp that is store in the database. This determines the sorting order when using views integration. Only %none and %date handling options will render the timezone selector to users.',
+          array('%none' => $tz_options['none'], '%date' => $tz_options['date'])),
+    );
+    $incremtOptions = array_combine(array(1, 2, 5, 10, 15, 30), array(1, 2, 5, 10, 15, 30));
+    $elements['increments'] = array();
+    $elements['increments']['minute'] = array(
+      '#type' => 'select',
+      '#title' => t('Minute increments'),
+      '#default_value' => empty($settings['increments']['minute']) ? 1 : $settings['increments']['minute'],
+      '#options' => $incremtOptions,
+      '#required' => TRUE,
+      '#weight' => -7,
+    );
+    $elements['increments']['second'] = array(
+      '#type' => 'select',
+      '#title' => t('Second increments'),
+      '#default_value' => empty($settings['increments']['second']) ? 1 : $settings['increments']['second'],
+      '#options' => $incremtOptions,
+      '#required' => TRUE,
+      '#weight' => -7,
+    );
+
+    $elements['theme_overrides'] = array('#tree' => TRUE);
+    $elements['theme_overrides']['txt_short'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Provide a textfield for collection of a short description of the date'),
+      '#default_value' => $settings['theme_overrides']['txt_short'],
+      '#weight' => -5,
+    );
+    $elements['theme_overrides']['txt_long'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Provide a textfield for collection of a long description of the date'),
+      '#default_value' => $settings['theme_overrides']['txt_long'],
+      '#weight' => -4,
+    );
+    $elements['theme_overrides']['check_approximate'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Provide a checkbox to specify that the date is approximate'),
+      '#default_value' => !empty($settings['theme_overrides']['check_approximate']),
+      '#weight' => -3,
+    );
+    $elements['theme_overrides']['range_inline'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Theme range widgets to be rendered inline.'),
+      '#default_value' => $has_range ? !empty($settings['theme_overrides']['range_inline']) : 0,
+      '#weight' => 0,
+      '#access' => $has_range,
+    );
+
+    $elements['hide_remove'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Hide the %remove checkbox', array('%remove' => t('Remove date', array(), array('context' => 'datetime')))),
+      '#default_value' => !empty($settings['hide_remove']),
+    );
+
+    $elements['help_txt'] = array(
+      '#tree' => TRUE,
+      '#type' => 'fieldset',
+      '#title' => t('Inline help'),
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+      '#description' => t('This provides additional help per component, or a way to override the default description text.'),
+    );
+
+    // Hide all bar current language.
+    $current_langcode = \Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED;
+    if (!isset($settings['help_txt'])) {
+      $settings['help_txt'] = array();
+    }
+    foreach ($settings['help_txt'] as $langcode => $values) {
+      if ($current_langcode == $langcode) {
+        continue;
+      }
+      foreach ($values as $index => $value) {
+        $settings['help_txt'][$langcode][$index] = array(
+          '#type' => 'value',
+          '#value' => $value,
+        );
+      }
+    }
+
+    $help_txt = $this->_partial_date_widget_help_text($current_langcode);
+    $elements['help_txt'][$current_langcode]['components'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Date components'),
+      '#default_value' => $help_txt['components'],
+      '#rows' => 3,
+      '#description' => t('Instructions to present under the date or date range components. No help shown by default.'),
+    );
+    $elements['help_txt'][$current_langcode]['check_approximate'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Date approximate checkbox'),
+      '#default_value' => $help_txt['check_approximate'],
+      '#rows' => 3,
+      '#description' => t('Instructions to present under the approximate checkbox if used. No help shown by default.'),
+    );
+
+    $elements['help_txt'][$current_langcode]['txt_short'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Short date description'),
+      '#default_value' => $help_txt['txt_short'],
+      '#rows' => 3,
+      '#description' => t('Instructions to present under the short date description if used. Default is %default', array('%default' => t('Short date description'))),
+    );
+    $elements['help_txt'][$current_langcode]['txt_long'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Long date description'),
+      '#default_value' => $help_txt['txt_long'],
+      '#rows' => 3,
+      '#description' => t('Instructions to present under the long date description if used. Default is %default', array('%default' => t('Longer description of date'))),
+    );
+    $elements['help_txt'][$current_langcode]['_remove'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Remove checkbox'),
+      '#default_value' => $help_txt['_remove'],
+      '#rows' => 3,
+      '#description' => t('Instructions to present under the remove checkbox if shown. No help shown by default.'),
+    );
+    return $elements;
+  }
+  
+  public function settingsSummary() {
+    //TODO make your own summary!
+    return parent::settingsSummary();
+  }
+   /**
+   * {@inheritdoc}
+   * (Drupal 7): hook_field_widget_error() => (Drupal 8): PartialDateWidget::errorElement
+   */
+  public function errorElement(array $element, \Symfony\Component\Validator\ConstraintViolationInterface $error, array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
+    switch ($error['error']) {
+      case 'partial_date_incomplete_from':
+      case 'partial_date_incomplete_to':
+        $base_key = strpos($error['error'], 'from') ? 'from' : 'to';
+        if (isset($error['partial_date_component']) && isset($element[$base_key][$error['partial_date_component']])) {
+          form_error($element[$base_key][$error['partial_date_component']], $error['message']);
+        }
+        else {
+          form_error($element[$base_key], $error['message']);
+        }
+        break;
+
+      case 'partial_date_incomplete_txt_short':
+      case 'partial_date_incomplete_txt_long':
+        $base_key = strpos($error['error'], 'from') ? 'from' : 'to';
+        form_error($element['year_to'], $error['message']);
+        break;
+
+      default:
+        form_error($element['from'], $error['message']);
+        break;
+    }
+  }
+ 
+/**
+ *  Helper functions from admin.inc
+ */
+  
+function _partial_date_widget_help_text($langcode = NULL) {
+  if (!isset($langcode)) {
+    $langcode = \Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED;
+  }
+  $settings = $this->getSettings();
+  $help_txt = array();
+  if (empty($settings['help_txt'][$langcode])) {
+    $help_txt = array();
+  }
+  else {
+    $help_txt += $settings['help_txt'][$langcode];
+  }
+  $help_txt += array(
+    'components' => '',
+    'check_approximate' => '',
+    'txt_short' => t('Short description of date'),
+    'txt_long' => t('Longer description of date'),
+    '_remove' => '',
+  );
+
+  return $help_txt;
+}
+
+
+  
+ 
+}
diff --git a/src/views_handler_filter_field_partial_date_year.php b/src/views_handler_filter_field_partial_date_year.php
new file mode 100644
index 0000000..e1c13a2
--- /dev/null
+++ b/src/views_handler_filter_field_partial_date_year.php
@@ -0,0 +1,305 @@
+<?php
+namespace Drupal\partial_date;
+
+/**
+ * TODO: This is a placeholder to eventually provide a exposed list filter
+ * based on the field approximate year values.
+ *
+ * This is a line per line clone of views_handler_filter_numeric ATM.
+ */
+class views_handler_filter_field_partial_date_year extends views_handler_filter_numeric {
+
+  var $always_multiple = TRUE;
+
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['value'] = array(
+      'contains' => array(
+        'min' => array('default' => ''),
+        'max' => array('default' => ''),
+        'value' => array('default' => ''),
+      ),
+    );
+
+    return $options;
+  }
+
+  function operators() {
+    $operators = array(
+      '<' => array(
+        'title' => t('Is less than'),
+        'method' => 'op_simple',
+        'short' => t('<'),
+        'values' => 1,
+      ),
+      '<=' => array(
+        'title' => t('Is less than or equal to'),
+        'method' => 'op_simple',
+        'short' => t('<='),
+        'values' => 1,
+      ),
+      '=' => array(
+        'title' => t('Is equal to'),
+        'method' => 'op_simple',
+        'short' => t('='),
+        'values' => 1,
+      ),
+      '!=' => array(
+        'title' => t('Is not equal to'),
+        'method' => 'op_simple',
+        'short' => t('!='),
+        'values' => 1,
+      ),
+      '>=' => array(
+        'title' => t('Is greater than or equal to'),
+        'method' => 'op_simple',
+        'short' => t('>='),
+        'values' => 1,
+      ),
+      '>' => array(
+        'title' => t('Is greater than'),
+        'method' => 'op_simple',
+        'short' => t('>'),
+        'values' => 1,
+      ),
+      'between' => array(
+        'title' => t('Is between'),
+        'method' => 'op_between',
+        'short' => t('between'),
+        'values' => 2,
+      ),
+      'not between' => array(
+        'title' => t('Is not between'),
+        'method' => 'op_between',
+        'short' => t('not between'),
+        'values' => 2,
+      ),
+    );
+
+    // if the definition allows for the empty operator, add it.
+    if (!empty($this->definition['allow empty'])) {
+      $operators += array(
+        'empty' => array(
+          'title' => t('Is empty (NULL)'),
+          'method' => 'op_empty',
+          'short' => t('empty'),
+          'values' => 0,
+        ),
+        'not empty' => array(
+          'title' => t('Is not empty (NOT NULL)'),
+          'method' => 'op_empty',
+          'short' => t('not empty'),
+          'values' => 0,
+        ),
+      );
+    }
+
+    return $operators;
+  }
+
+  /**
+   * Provide a list of all the numeric operators
+   */
+  function operator_options($which = 'title') {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      $options[$id] = $info[$which];
+    }
+
+    return $options;
+  }
+
+  function operator_values($values = 1) {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      if ($info['values'] == $values) {
+        $options[] = $id;
+      }
+    }
+
+    return $options;
+  }
+  /**
+   * Provide a simple textfield for equality
+   */
+  function value_form(&$form, &$form_state) {
+    $form['value']['#tree'] = TRUE;
+
+    // We have to make some choices when creating this as an exposed
+    // filter form. For example, if the operator is locked and thus
+    // not rendered, we can't render dependencies; instead we only
+    // render the form items we need.
+    $which = 'all';
+    if (!empty($form['operator'])) {
+      $source = ($form['operator']['#type'] == 'radios') ? 'radio:options[operator]' : 'edit-options-operator';
+    }
+
+    if (!empty($form_state['exposed'])) {
+      $identifier = $this->options['expose']['identifier'];
+
+      if (empty($this->options['expose']['use_operator']) || empty($this->options['expose']['operator_id'])) {
+        // exposed and locked.
+        $which = in_array($this->operator, $this->operator_values(2)) ? 'minmax' : 'value';
+      }
+      else {
+        $source = 'edit-' . \Drupal\Component\Utility\Html::getId($this->options['expose']['operator_id']);
+      }
+    }
+
+    if ($which == 'all') {
+      $form['value']['value'] = array(
+        '#type' => 'textfield',
+        '#title' => empty($form_state['exposed']) ? t('Value') : '',
+        '#size' => 30,
+        '#default_value' => $this->value['value'],
+        '#dependency' => array($source => $this->operator_values(1)),
+      );
+      if (!empty($form_state['exposed']) && !isset($form_state['input'][$identifier]['value'])) {
+        $form_state['input'][$identifier]['value'] = $this->value['value'];
+      }
+    }
+    elseif ($which == 'value') {
+      // When exposed we drop the value-value and just do value if
+      // the operator is locked.
+      $form['value'] = array(
+        '#type' => 'textfield',
+        '#title' => empty($form_state['exposed']) ? t('Value') : '',
+        '#size' => 30,
+        '#default_value' => $this->value['value'],
+      );
+      if (!empty($form_state['exposed']) && !isset($form_state['input'][$identifier])) {
+        $form_state['input'][$identifier] = $this->value['value'];
+      }
+    }
+
+    if ($which == 'all' || $which == 'minmax') {
+      $form['value']['min'] = array(
+        '#type' => 'textfield',
+        '#title' => empty($form_state['exposed']) ? t('Min') : '',
+        '#size' => 30,
+        '#default_value' => $this->value['min'],
+      );
+      $form['value']['max'] = array(
+        '#type' => 'textfield',
+        '#title' => empty($form_state['exposed']) ? t('And max') : t('And'),
+        '#size' => 30,
+        '#default_value' => $this->value['max'],
+      );
+      if ($which == 'all') {
+        $dependency = array(
+          '#dependency' => array($source => $this->operator_values(2)),
+        );
+        $form['value']['min'] += $dependency;
+        $form['value']['max'] += $dependency;
+      }
+      if (!empty($form_state['exposed']) && !isset($form_state['input'][$identifier]['min'])) {
+        $form_state['input'][$identifier]['min'] = $this->value['min'];
+      }
+      if (!empty($form_state['exposed']) && !isset($form_state['input'][$identifier]['max'])) {
+        $form_state['input'][$identifier]['max'] = $this->value['max'];
+      }
+
+      if (!isset($form['value'])) {
+        // Ensure there is something in the 'value'.
+        $form['value'] = array(
+          '#type' => 'value',
+          '#value' => NULL
+        );
+      }
+    }
+  }
+
+  function query() {
+    $this->ensure_my_table();
+    $field = "$this->table_alias.$this->real_field";
+
+    $info = $this->operators();
+    if (!empty($info[$this->operator]['method'])) {
+      $this->{$info[$this->operator]['method']}($field);
+    }
+  }
+
+  function op_between($field) {
+    if ($this->operator == 'between') {
+      $this->query->add_where($this->options['group'], $field, array($this->value['min'], $this->value['max']), 'BETWEEN');
+    }
+    else {
+      $this->query->add_where($this->options['group'], db_or()->condition($field, $this->value['min'], '<=')->condition($field, $this->value['max'], '>='));
+    }
+  }
+
+  function op_simple($field) {
+    $this->query->add_where($this->options['group'], $field, $this->value['value'], $this->operator);
+  }
+
+  function op_empty($field) {
+    if ($this->operator == 'empty') {
+      $operator = "IS NULL";
+    }
+    else {
+      $operator = "IS NOT NULL";
+    }
+
+    $this->query->add_where($this->options['group'], $field, NULL, $operator);
+  }
+
+  function admin_summary() {
+    if (!empty($this->options['exposed'])) {
+      return t('exposed');
+    }
+
+    $options = $this->operator_options('short');
+    $output = \Drupal\Component\Utility\SafeMarkup::checkPlain($options[$this->operator]);
+    if (in_array($this->operator, $this->operator_values(2))) {
+      $output .= ' ' . t('@min and @max', array('@min' => $this->value['min'], '@max' => $this->value['max']));
+    }
+    elseif (in_array($this->operator, $this->operator_values(1))) {
+      $output .= ' ' . \Drupal\Component\Utility\SafeMarkup::checkPlain($this->value['value']);
+    }
+    return $output;
+  }
+
+  /**
+   * Do some minor translation of the exposed input
+   */
+  function accept_exposed_input($input) {
+    if (empty($this->options['exposed'])) {
+      return TRUE;
+    }
+
+    // rewrite the input value so that it's in the correct format so that
+    // the parent gets the right data.
+    if (!empty($this->options['expose']['identifier'])) {
+      $value = &$input[$this->options['expose']['identifier']];
+      if (!is_array($value)) {
+        $value = array(
+          'value' => $value,
+        );
+      }
+    }
+
+    $rc = parent::accept_exposed_input($input);
+
+    if (empty($this->options['expose']['required'])) {
+      // We have to do some of our own checking for non-required filters.
+      $info = $this->operators();
+      if (!empty($info[$this->operator]['values'])) {
+        switch ($info[$this->operator]['values']) {
+          case 1:
+            if ($value['value'] === '') {
+              return FALSE;
+            }
+            break;
+          case 2:
+            if ($value['min'] === '' && $value['max'] === '') {
+              return FALSE;
+            }
+            break;
+        }
+      }
+    }
+
+    return $rc;
+  }
+}
diff --git a/templates/partial-date-element.html.twig b/templates/partial-date-element.html.twig
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/templates/partial-date-element.html.twig
@@ -0,0 +1 @@
+
diff --git a/templates/partial-date-format-settings-form.html.twig b/templates/partial-date-format-settings-form.html.twig
new file mode 100644
index 0000000..e69de29
diff --git a/tests/src/PartialDateTest.php b/tests/src/PartialDateTest.php
new file mode 100644
index 0000000..9b51785
--- /dev/null
+++ b/tests/src/PartialDateTest.php
@@ -0,0 +1,173 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\partial_date\Tests\PartialDateTest.
+ */
+
+namespace Drupal\partial_date\Tests;
+
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\simpletest\WebTestBase;
+
+/**
+ * Ensures that the interval field works correctly.
+ *
+ * @group partial_date
+ */
+class PartialDateTest extends WebTestBase {
+
+  /**
+   * Profile to use.
+   */
+  protected $profile = 'testing';
+
+  /**
+   * Admin user
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected $adminUser;
+
+  /**
+   * Modules to enable.
+   *
+   * @var array
+   */
+  public static $modules = array(
+    'field_ui',
+    'entity_test',
+    'partial_date',
+  );
+
+  /**
+   * Permissions to grant admin user.
+   *
+   * @var array
+   */
+  protected $permissions = array(
+    'access administration pages',
+    'view test entity',
+    'administer entity_test fields',
+    'administer entity_test content',
+  );
+
+  /**
+   * Sets the test up.
+   */
+  protected function setUp() {
+    parent::setUp();
+#    $this->adminUser = $this->drupalCreateUser($this->permissions);
+  }
+
+  /**
+   * Tests adding and editing values using interval.
+   */
+  public function testInterval() {
+//    $this->drupalLogin($this->adminUser);
+//    // Add a new interval field.
+//    $this->drupalGet('entity_test/structure/entity_test/fields/add-field');
+//    $edit = array(
+//      'label' => 'Foobar',
+//      'field_name' => 'foobar',
+//      'new_storage_type' => 'interval',
+//    );
+//    $this->drupalPostForm(NULL, $edit, t('Save and continue'));
+//    $this->drupalPostForm(NULL, array(
+//      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+//    ), t('Save field settings'));
+//
+//    $this->drupalPostForm(NULL, array(), t('Save settings'));
+//    $this->assertRaw(t('Saved %name configuration', array('%name' => 'Foobar')));
+//
+//    // Setup widget and formatters.
+//    entity_get_form_display('entity_test', 'entity_test', 'default')
+//      ->setComponent('field_foobar', array(
+//        'type' => 'interval_default',
+//        'weight' => 20,
+//      ))
+//      ->save();
+//
+//    entity_get_display('entity_test', 'entity_test', 'default')
+//      ->setComponent('field_foobar', array(
+//        'label' => 'hidden',
+//        'type' => 'interval_default',
+//        'weight' => 20,
+//      ))
+//      ->save();
+//
+//    // Test the fields values/widget.
+//    $this->drupalGet('entity_test/add');
+//    $this->assertField('field_foobar[0][interval]', 'Found foobar field interval');
+//    $this->assertField('field_foobar[0][period]', 'Found foobar field period');
+//
+//    // Add some extra fields.
+//    $this->drupalPostAjaxForm(NULL, array(), array('field_foobar_add_more' => t('Add another item')), NULL, array(), array(), 'entity-test-entity-test-form');
+//    $this->drupalPostAjaxForm(NULL, array(), array('field_foobar_add_more' => t('Add another item')), NULL, array(), array(), 'entity-test-entity-test-form');
+//
+//    $edit = array(
+//      'field_foobar[0][period]' => 'week',
+//      'field_foobar[0][interval]' => 1,
+//      'field_foobar[1][period]' => 'day',
+//      'field_foobar[1][interval]' => 3,
+//      'field_foobar[2][period]' => 'quarter',
+//      'field_foobar[2][interval]' => 1,
+//      'name[0][value]' => 'Barfoo',
+//      'user_id[0][target_id]' => 'foo (' . $this->adminUser->id() . ')',
+//    );
+//
+//    $this->drupalPostForm(NULL, $edit, t('Save'));
+//    $entities = entity_load_multiple_by_properties('entity_test', array(
+//      'name' => 'Barfoo',
+//    ));
+//    $this->assertEqual(1, count($entities), 'Entity was saved');
+//    $entity = reset($entities);
+//    $this->drupalGet('entity_test/' . $entity->id());
+//    $this->assertText('Barfoo');
+//    $this->assertText('1 Week');
+//    $this->assertText('3 Days');
+//    $this->assertText('1 Quarter');
+//
+//    // Change the formatter to raw.
+//    entity_get_display('entity_test', 'entity_test', 'default')
+//      ->setComponent('field_foobar', array(
+//        'label' => 'hidden',
+//        'type' => 'interval_raw',
+//        'weight' => 20,
+//      ))
+//      ->save();
+//    $this->drupalGet('entity_test/' . $entity->id());
+//    $this->assertText('1 Week');
+//    $this->assertText('3 Days');
+//    $this->assertText('1 Quarter');
+//
+//    // Change the formatter to php.
+//    entity_get_display('entity_test', 'entity_test', 'default')
+//      ->setComponent('field_foobar', array(
+//        'label' => 'hidden',
+//        'type' => 'interval_php',
+//        'weight' => 20,
+//      ))
+//      ->save();
+//    $this->drupalGet('entity_test/' . $entity->id());
+//    $this->assertText('7 days');
+//    $this->assertText('3 days');
+//    $this->assertText('3 months');
+//
+//    $this->drupalGet('entity_test/manage/' . $entity->id() . '/edit');
+//    $edit = array(
+//      'name[0][value]' => 'Bazbar',
+//      // Remove one child.
+//      'field_foobar[2][interval]' => '',
+//    );
+//    $this->drupalPostForm(NULL, $edit, t('Save'));
+//    $this->drupalGet('entity_test/' . $entity->id());
+//    $this->assertText('Bazbar');
+//    // Reload entity.
+//    \Drupal::entityManager()->getStorage('entity_test')->resetCache(array($entity->id()));
+//    $entity = entity_load('entity_test', $entity->id());
+//    $this->assertEqual(count($entity->field_foobar), 2, 'Two values in field');
+    $this->assertEqual('testing', $this->profile);
+  }
+
+}
diff --git a/tests/src/Unit/PartialDateConfigTest.php b/tests/src/Unit/PartialDateConfigTest.php
new file mode 100644
index 0000000..bde4ad6
--- /dev/null
+++ b/tests/src/Unit/PartialDateConfigTest.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Drupal\Tests\partial_date\Unit;
+
+use Drupal\Tests\UnitTestCase;
+use Drupal\config;
+
+/**
+ * Description of PartialDateCofigTest
+ *
+ * @group partial_date
+ */
+class PartialDateConfigTest extends UnitTestCase {
+  //put your code here
+  
+  /**
+   * @var \Drupal\config Access drupal configuration system
+   */
+  private $config;
+  
+  protected function setUp() {
+    parent::setUp();
+    $this->config = \Drupal::config('partial_date.settings');
+  }
+
+  /*
+   * Test expected default configuration.
+   */
+  public function testDefaultConfig() {
+    $this->assertEquals('estimate_label', $this->config->get('short.display.year'), 'check short.display.year');
+    $this->assertEquals(1, NULL);
+  }
+
+}
